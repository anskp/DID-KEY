const hre = require("hardhat");
const fs = require("fs");
const path = require("path");
require("dotenv").config({ path: path.resolve(__dirname, "..", ".env") });

async function main() {
  console.log("üöÄ Deploying Simplified Multi-Chain DID Registry...\n");

  try {
    // Setup deployer using private key directly
    const provider = new hre.ethers.providers.JsonRpcProvider(process.env.SEPOLIA_RPC_URL);
    const deployer = new hre.ethers.Wallet(process.env.PHANTOM_PRIVATE_KEY, provider);
    const balance = await deployer.getBalance();
    
    console.log("üë§ Deploying with account:", deployer.address);
    console.log("üí∞ Account balance:", hre.ethers.utils.formatEther(balance), "ETH");

    if (balance.lt(hre.ethers.utils.parseEther("0.01"))) {
      console.log("‚ö†Ô∏è WARNING: Low balance!");
    }

    // Compile
    console.log("\nüî® Compiling contract...");
    await hre.run("compile");
    console.log("‚úÖ Compiled successfully");

    // Deploy
    console.log("\nüì¶ Deploying SimplifiedMultiChainDIDRegistry...");
    const SimplifiedRegistry = await hre.ethers.getContractFactory("SimplifiedMultiChainDIDRegistry", deployer);
    const didRegistry = await SimplifiedRegistry.deploy();
    
    console.log("‚è≥ Waiting for deployment...");
    await didRegistry.deployed();
    
    console.log("‚úÖ Contract deployed!");
    console.log("üè¢ Address:", didRegistry.address);
    console.log("üìÑ Tx Hash:", didRegistry.deployTransaction.hash);

    // Verify deployment
    console.log("\nüîç Verifying deployment...");
    const owner = await didRegistry.owner();
    const maxWallets = await didRegistry.MAX_WALLETS_PER_DID();
    
    console.log("üëë Owner:", owner);
    console.log("üìä Max wallets:", maxWallets.toString());

    // Check supported blockchains
    const chains = ["ETH_TEST5", "BTC_TEST", "SOL_TEST"];
    console.log("\nüîó Supported blockchains:");
    for (const chain of chains) {
      const supported = await didRegistry.supportedBlockchains(chain);
      console.log(`   ${chain}: ${supported ? "‚úÖ" : "‚ùå"}`);
    }

    // Update .env
    console.log("\nüíæ Updating .env file...");
    let envContent = fs.readFileSync('.env', 'utf8');
    
    // Remove old contract lines
    envContent = envContent
      .split('\n')
      .filter(line => !line.startsWith('CONTRACT_ADDRESS='))
      .join('\n');
    
    // Add new contract address
    envContent += `\nCONTRACT_ADDRESS=${didRegistry.address}\n`;
    fs.writeFileSync('.env', envContent);
    
    console.log("‚úÖ .env updated with new contract address");

    console.log("\nüéâ DEPLOYMENT COMPLETE!");
    console.log("üè¢ Contract:", didRegistry.address);
    console.log("üåê Etherscan:", `https://sepolia.etherscan.io/address/${didRegistry.address}`);
    
    console.log("\n‚úÖ SIMPLIFIED CONTRACT FEATURES:");
    console.log("‚úÖ Ethereum signature verification (full)");
    console.log("‚úÖ Bitcoin wallet proofs (simplified)");
    console.log("‚úÖ Solana wallet proofs (simplified)");
    console.log("‚úÖ Multi-chain DID registration");
    
    console.log("\nüìã NEXT STEPS:");
    console.log("1. ‚úÖ Simplified contract deployed");
    console.log("2. üöÄ Register DID: npx hardhat run scripts/register-did-multichain.js --network sepolia");

  } catch (error) {
    console.error("‚ùå Deployment failed:", error.message);
    console.error("Stack:", error.stack);
    process.exit(1);
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Fatal error:", error);
    process.exit(1);
  });