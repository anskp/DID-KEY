/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CreateWebhookRequest } from '../models';
import { NotificationPaginatedResponse } from '../models';
import { NotificationStatus } from '../models';
import { NotificationWithData } from '../models';
import { ResendNotificationsByResourceIdRequest } from '../models';
import { UpdateWebhookRequest } from '../models';
import { Webhook } from '../models';
import { WebhookEvent } from '../models';
import { WebhookPaginatedResponse } from '../models';
/**
 * WebhooksV2BetaApi - axios parameter creator
 * @export
 */
export declare const WebhooksV2BetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new webhook, which will be triggered on the specified events **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Create new webhook
     * @param {CreateWebhookRequest} createWebhookRequest
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhook: (createWebhookRequest: CreateWebhookRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Delete webhook
     * @param {string} webhookId The unique identifier of the webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook: (webhookId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get notification by id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get notification by id
     * @param {string} webhookId The ID of the webhook to fetch
     * @param {string} notificationId The ID of the notification to fetch
     * @param {boolean} [includeData] Include the data of the notification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotification: (webhookId: string, notificationId: string, includeData?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all notifications by webhook id (paginated) **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get all notifications by webhook id
     * @param {string} webhookId
     * @param {GetNotificationsOrderEnum} [order] ASC / DESC ordering (default DESC)
     * @param {string} [pageCursor] Cursor of the required page
     * @param {number} [pageSize] Maximum number of items in the page
     * @param {string} [createdStartDate] sort by start date
     * @param {string} [createdEndDate] sort by end date
     * @param {Array<NotificationStatus>} [statuses] Filter by Notification statues
     * @param {Array<WebhookEvent>} [eventTypes] Filter by Notification eventTypes
     * @param {string} [resourceId] Filter by resourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications: (webhookId: string, order?: GetNotificationsOrderEnum, pageCursor?: string, pageSize?: number, createdStartDate?: string, createdEndDate?: string, statuses?: Array<NotificationStatus>, eventTypes?: Array<WebhookEvent>, resourceId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get webhook by id
     * @param {string} webhookId The unique identifier of the webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook: (webhookId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all webhooks (paginated) **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get all webhooks
     * @param {GetWebhooksOrderEnum} [order] ASC / DESC ordering (default DESC)
     * @param {string} [pageCursor] Cursor of the required page
     * @param {number} [pageSize] Maximum number of items in the page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks: (order?: GetWebhooksOrderEnum, pageCursor?: string, pageSize?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Resend notification by ID **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Resend notification by id
     * @param {string} webhookId The ID of the webhook
     * @param {string} notificationId The ID of the notification
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendNotificationById: (webhookId: string, notificationId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Resend notifications by resource Id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Resend notifications by resource Id
     * @param {ResendNotificationsByResourceIdRequest} resendNotificationsByResourceIdRequest
     * @param {string} webhookId The ID of the webhook
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendNotificationsByResourceId: (resendNotificationsByResourceIdRequest: ResendNotificationsByResourceIdRequest, webhookId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Update webhook
     * @param {UpdateWebhookRequest} updateWebhookRequest
     * @param {string} webhookId The unique identifier of the webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhook: (updateWebhookRequest: UpdateWebhookRequest, webhookId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WebhooksV2BetaApi - functional programming interface
 * @export
 */
export declare const WebhooksV2BetaApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new webhook, which will be triggered on the specified events **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Create new webhook
     * @param {CreateWebhookRequest} createWebhookRequest
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhook(createWebhookRequest: CreateWebhookRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>>;
    /**
     * Delete a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Delete webhook
     * @param {string} webhookId The unique identifier of the webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(webhookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>>;
    /**
     * Get notification by id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get notification by id
     * @param {string} webhookId The ID of the webhook to fetch
     * @param {string} notificationId The ID of the notification to fetch
     * @param {boolean} [includeData] Include the data of the notification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotification(webhookId: string, notificationId: string, includeData?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationWithData>>;
    /**
     * Get all notifications by webhook id (paginated) **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get all notifications by webhook id
     * @param {string} webhookId
     * @param {GetNotificationsOrderEnum} [order] ASC / DESC ordering (default DESC)
     * @param {string} [pageCursor] Cursor of the required page
     * @param {number} [pageSize] Maximum number of items in the page
     * @param {string} [createdStartDate] sort by start date
     * @param {string} [createdEndDate] sort by end date
     * @param {Array<NotificationStatus>} [statuses] Filter by Notification statues
     * @param {Array<WebhookEvent>} [eventTypes] Filter by Notification eventTypes
     * @param {string} [resourceId] Filter by resourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications(webhookId: string, order?: GetNotificationsOrderEnum, pageCursor?: string, pageSize?: number, createdStartDate?: string, createdEndDate?: string, statuses?: Array<NotificationStatus>, eventTypes?: Array<WebhookEvent>, resourceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationPaginatedResponse>>;
    /**
     * Retrieve a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get webhook by id
     * @param {string} webhookId The unique identifier of the webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook(webhookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>>;
    /**
     * Get all webhooks (paginated) **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get all webhooks
     * @param {GetWebhooksOrderEnum} [order] ASC / DESC ordering (default DESC)
     * @param {string} [pageCursor] Cursor of the required page
     * @param {number} [pageSize] Maximum number of items in the page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks(order?: GetWebhooksOrderEnum, pageCursor?: string, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookPaginatedResponse>>;
    /**
     * Resend notification by ID **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Resend notification by id
     * @param {string} webhookId The ID of the webhook
     * @param {string} notificationId The ID of the notification
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendNotificationById(webhookId: string, notificationId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Resend notifications by resource Id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Resend notifications by resource Id
     * @param {ResendNotificationsByResourceIdRequest} resendNotificationsByResourceIdRequest
     * @param {string} webhookId The ID of the webhook
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendNotificationsByResourceId(resendNotificationsByResourceIdRequest: ResendNotificationsByResourceIdRequest, webhookId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Update webhook
     * @param {UpdateWebhookRequest} updateWebhookRequest
     * @param {string} webhookId The unique identifier of the webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhook(updateWebhookRequest: UpdateWebhookRequest, webhookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>>;
};
/**
 * WebhooksV2BetaApi - factory interface
 * @export
 */
export declare const WebhooksV2BetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new webhook, which will be triggered on the specified events **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Create new webhook
     * @param {WebhooksV2BetaApiCreateWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhook(requestParameters: WebhooksV2BetaApiCreateWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<Webhook>;
    /**
     * Delete a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Delete webhook
     * @param {WebhooksV2BetaApiDeleteWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(requestParameters: WebhooksV2BetaApiDeleteWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<Webhook>;
    /**
     * Get notification by id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get notification by id
     * @param {WebhooksV2BetaApiGetNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotification(requestParameters: WebhooksV2BetaApiGetNotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<NotificationWithData>;
    /**
     * Get all notifications by webhook id (paginated) **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get all notifications by webhook id
     * @param {WebhooksV2BetaApiGetNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications(requestParameters: WebhooksV2BetaApiGetNotificationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<NotificationPaginatedResponse>;
    /**
     * Retrieve a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get webhook by id
     * @param {WebhooksV2BetaApiGetWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook(requestParameters: WebhooksV2BetaApiGetWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<Webhook>;
    /**
     * Get all webhooks (paginated) **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get all webhooks
     * @param {WebhooksV2BetaApiGetWebhooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks(requestParameters?: WebhooksV2BetaApiGetWebhooksRequest, options?: RawAxiosRequestConfig): AxiosPromise<WebhookPaginatedResponse>;
    /**
     * Resend notification by ID **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Resend notification by id
     * @param {WebhooksV2BetaApiResendNotificationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendNotificationById(requestParameters: WebhooksV2BetaApiResendNotificationByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Resend notifications by resource Id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Resend notifications by resource Id
     * @param {WebhooksV2BetaApiResendNotificationsByResourceIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendNotificationsByResourceId(requestParameters: WebhooksV2BetaApiResendNotificationsByResourceIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Update webhook
     * @param {WebhooksV2BetaApiUpdateWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhook(requestParameters: WebhooksV2BetaApiUpdateWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<Webhook>;
};
/**
 * Request parameters for createWebhook operation in WebhooksV2BetaApi.
 * @export
 * @interface WebhooksV2BetaApiCreateWebhookRequest
 */
export interface WebhooksV2BetaApiCreateWebhookRequest {
    /**
     *
     * @type {CreateWebhookRequest}
     * @memberof WebhooksV2BetaApiCreateWebhook
     */
    readonly createWebhookRequest: CreateWebhookRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof WebhooksV2BetaApiCreateWebhook
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for deleteWebhook operation in WebhooksV2BetaApi.
 * @export
 * @interface WebhooksV2BetaApiDeleteWebhookRequest
 */
export interface WebhooksV2BetaApiDeleteWebhookRequest {
    /**
     * The unique identifier of the webhook
     * @type {string}
     * @memberof WebhooksV2BetaApiDeleteWebhook
     */
    readonly webhookId: string;
}
/**
 * Request parameters for getNotification operation in WebhooksV2BetaApi.
 * @export
 * @interface WebhooksV2BetaApiGetNotificationRequest
 */
export interface WebhooksV2BetaApiGetNotificationRequest {
    /**
     * The ID of the webhook to fetch
     * @type {string}
     * @memberof WebhooksV2BetaApiGetNotification
     */
    readonly webhookId: string;
    /**
     * The ID of the notification to fetch
     * @type {string}
     * @memberof WebhooksV2BetaApiGetNotification
     */
    readonly notificationId: string;
    /**
     * Include the data of the notification
     * @type {boolean}
     * @memberof WebhooksV2BetaApiGetNotification
     */
    readonly includeData?: boolean;
}
/**
 * Request parameters for getNotifications operation in WebhooksV2BetaApi.
 * @export
 * @interface WebhooksV2BetaApiGetNotificationsRequest
 */
export interface WebhooksV2BetaApiGetNotificationsRequest {
    /**
     *
     * @type {string}
     * @memberof WebhooksV2BetaApiGetNotifications
     */
    readonly webhookId: string;
    /**
     * ASC / DESC ordering (default DESC)
     * @type {'ASC' | 'DESC'}
     * @memberof WebhooksV2BetaApiGetNotifications
     */
    readonly order?: GetNotificationsOrderEnum;
    /**
     * Cursor of the required page
     * @type {string}
     * @memberof WebhooksV2BetaApiGetNotifications
     */
    readonly pageCursor?: string;
    /**
     * Maximum number of items in the page
     * @type {number}
     * @memberof WebhooksV2BetaApiGetNotifications
     */
    readonly pageSize?: number;
    /**
     * sort by start date
     * @type {string}
     * @memberof WebhooksV2BetaApiGetNotifications
     */
    readonly createdStartDate?: string;
    /**
     * sort by end date
     * @type {string}
     * @memberof WebhooksV2BetaApiGetNotifications
     */
    readonly createdEndDate?: string;
    /**
     * Filter by Notification statues
     * @type {Array<NotificationStatus>}
     * @memberof WebhooksV2BetaApiGetNotifications
     */
    readonly statuses?: Array<NotificationStatus>;
    /**
     * Filter by Notification eventTypes
     * @type {Array<WebhookEvent>}
     * @memberof WebhooksV2BetaApiGetNotifications
     */
    readonly eventTypes?: Array<WebhookEvent>;
    /**
     * Filter by resourceId
     * @type {string}
     * @memberof WebhooksV2BetaApiGetNotifications
     */
    readonly resourceId?: string;
}
/**
 * Request parameters for getWebhook operation in WebhooksV2BetaApi.
 * @export
 * @interface WebhooksV2BetaApiGetWebhookRequest
 */
export interface WebhooksV2BetaApiGetWebhookRequest {
    /**
     * The unique identifier of the webhook
     * @type {string}
     * @memberof WebhooksV2BetaApiGetWebhook
     */
    readonly webhookId: string;
}
/**
 * Request parameters for getWebhooks operation in WebhooksV2BetaApi.
 * @export
 * @interface WebhooksV2BetaApiGetWebhooksRequest
 */
export interface WebhooksV2BetaApiGetWebhooksRequest {
    /**
     * ASC / DESC ordering (default DESC)
     * @type {'ASC' | 'DESC'}
     * @memberof WebhooksV2BetaApiGetWebhooks
     */
    readonly order?: GetWebhooksOrderEnum;
    /**
     * Cursor of the required page
     * @type {string}
     * @memberof WebhooksV2BetaApiGetWebhooks
     */
    readonly pageCursor?: string;
    /**
     * Maximum number of items in the page
     * @type {number}
     * @memberof WebhooksV2BetaApiGetWebhooks
     */
    readonly pageSize?: number;
}
/**
 * Request parameters for resendNotificationById operation in WebhooksV2BetaApi.
 * @export
 * @interface WebhooksV2BetaApiResendNotificationByIdRequest
 */
export interface WebhooksV2BetaApiResendNotificationByIdRequest {
    /**
     * The ID of the webhook
     * @type {string}
     * @memberof WebhooksV2BetaApiResendNotificationById
     */
    readonly webhookId: string;
    /**
     * The ID of the notification
     * @type {string}
     * @memberof WebhooksV2BetaApiResendNotificationById
     */
    readonly notificationId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof WebhooksV2BetaApiResendNotificationById
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for resendNotificationsByResourceId operation in WebhooksV2BetaApi.
 * @export
 * @interface WebhooksV2BetaApiResendNotificationsByResourceIdRequest
 */
export interface WebhooksV2BetaApiResendNotificationsByResourceIdRequest {
    /**
     *
     * @type {ResendNotificationsByResourceIdRequest}
     * @memberof WebhooksV2BetaApiResendNotificationsByResourceId
     */
    readonly resendNotificationsByResourceIdRequest: ResendNotificationsByResourceIdRequest;
    /**
     * The ID of the webhook
     * @type {string}
     * @memberof WebhooksV2BetaApiResendNotificationsByResourceId
     */
    readonly webhookId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof WebhooksV2BetaApiResendNotificationsByResourceId
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for updateWebhook operation in WebhooksV2BetaApi.
 * @export
 * @interface WebhooksV2BetaApiUpdateWebhookRequest
 */
export interface WebhooksV2BetaApiUpdateWebhookRequest {
    /**
     *
     * @type {UpdateWebhookRequest}
     * @memberof WebhooksV2BetaApiUpdateWebhook
     */
    readonly updateWebhookRequest: UpdateWebhookRequest;
    /**
     * The unique identifier of the webhook
     * @type {string}
     * @memberof WebhooksV2BetaApiUpdateWebhook
     */
    readonly webhookId: string;
}
/**
 * WebhooksV2BetaApi - object-oriented interface
 * @export
 * @class WebhooksV2BetaApi
 * @extends {BaseAPI}
 */
export declare class WebhooksV2BetaApi extends BaseAPI {
    /**
     * Creates a new webhook, which will be triggered on the specified events **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Create new webhook
     * @param {WebhooksV2BetaApiCreateWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksV2BetaApi
     */
    createWebhook(requestParameters: WebhooksV2BetaApiCreateWebhookRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<Webhook>>;
    /**
     * Delete a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Delete webhook
     * @param {WebhooksV2BetaApiDeleteWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksV2BetaApi
     */
    deleteWebhook(requestParameters: WebhooksV2BetaApiDeleteWebhookRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<Webhook>>;
    /**
     * Get notification by id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get notification by id
     * @param {WebhooksV2BetaApiGetNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksV2BetaApi
     */
    getNotification(requestParameters: WebhooksV2BetaApiGetNotificationRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<NotificationWithData>>;
    /**
     * Get all notifications by webhook id (paginated) **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get all notifications by webhook id
     * @param {WebhooksV2BetaApiGetNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksV2BetaApi
     */
    getNotifications(requestParameters: WebhooksV2BetaApiGetNotificationsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<NotificationPaginatedResponse>>;
    /**
     * Retrieve a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get webhook by id
     * @param {WebhooksV2BetaApiGetWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksV2BetaApi
     */
    getWebhook(requestParameters: WebhooksV2BetaApiGetWebhookRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<Webhook>>;
    /**
     * Get all webhooks (paginated) **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Get all webhooks
     * @param {WebhooksV2BetaApiGetWebhooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksV2BetaApi
     */
    getWebhooks(requestParameters?: WebhooksV2BetaApiGetWebhooksRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<WebhookPaginatedResponse>>;
    /**
     * Resend notification by ID **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Resend notification by id
     * @param {WebhooksV2BetaApiResendNotificationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksV2BetaApi
     */
    resendNotificationById(requestParameters: WebhooksV2BetaApiResendNotificationByIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Resend notifications by resource Id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Resend notifications by resource Id
     * @param {WebhooksV2BetaApiResendNotificationsByResourceIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksV2BetaApi
     */
    resendNotificationsByResourceId(requestParameters: WebhooksV2BetaApiResendNotificationsByResourceIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Update a webhook by its id **Note:** These endpoints are currently in beta and might be subject to changes.
     * @summary Update webhook
     * @param {WebhooksV2BetaApiUpdateWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksV2BetaApi
     */
    updateWebhook(requestParameters: WebhooksV2BetaApiUpdateWebhookRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<Webhook>>;
}
/**
 * @export
 */
export declare const GetNotificationsOrderEnum: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type GetNotificationsOrderEnum = typeof GetNotificationsOrderEnum[keyof typeof GetNotificationsOrderEnum];
/**
 * @export
 */
export declare const GetWebhooksOrderEnum: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type GetWebhooksOrderEnum = typeof GetWebhooksOrderEnum[keyof typeof GetWebhooksOrderEnum];
