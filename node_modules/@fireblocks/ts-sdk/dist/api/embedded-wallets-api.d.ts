/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { EmbeddedWallet } from '../models';
import { EmbeddedWalletAccount } from '../models';
import { EmbeddedWalletAddressDetails } from '../models';
import { EmbeddedWalletAssetBalance } from '../models';
import { EmbeddedWalletAssetResponse } from '../models';
import { EmbeddedWalletDevice } from '../models';
import { EmbeddedWalletDeviceKeySetupResponse } from '../models';
import { EmbeddedWalletLatestBackupResponse } from '../models';
import { EmbeddedWalletPaginatedAddressesResponse } from '../models';
import { EmbeddedWalletPaginatedAssetsResponse } from '../models';
import { EmbeddedWalletPaginatedWalletsResponse } from '../models';
import { PublicKeyInformation } from '../models';
/**
 * EmbeddedWalletsApi - axios parameter creator
 * @export
 */
export declare const EmbeddedWalletsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get the addresses of a specific asset, under a specific account, under a specific Non Custodial Wallet
     * @summary Add asset to account
     * @param {string} walletId Wallet Id
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEmbeddedWalletAsset: (walletId: string, accountId: string, assetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create new Non Custodial Wallet
     * @summary Create a new wallet
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmbeddedWallet: (idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new account under a specific Non Custodial Wallet
     * @summary Create a new account
     * @param {string} walletId Wallet Id
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmbeddedWalletAccount: (walletId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a wallet
     * @summary Get a wallet
     * @param {string} walletId Wallet Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWallet: (walletId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a specific account under a specific Non Custodial Wallet
     * @summary Get a account
     * @param {string} walletId WalletId
     * @param {string} accountId The ID of the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAccount: (walletId: string, accountId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the addresses of a specific asset, under a specific account, under a specific Non Custodial Wallet
     * @summary Retrieve asset addresses
     * @param {string} walletId Wallet Id
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {string} [pageCursor] Cursor to the next page
     * @param {number} [pageSize] Items per page
     * @param {GetEmbeddedWalletAddressesSortEnum} [sort] Sort by address
     * @param {GetEmbeddedWalletAddressesOrderEnum} [order] Is the order ascending or descending
     * @param {boolean} [enabled] Enabled
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAddresses: (walletId: string, accountId: string, assetId: string, pageCursor?: string, pageSize?: number, sort?: GetEmbeddedWalletAddressesSortEnum, order?: GetEmbeddedWalletAddressesOrderEnum, enabled?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get asset under a specific account, under a specific Non Custodial Wallet
     * @summary Retrieve asset
     * @param {string} walletId Wallet Id
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAsset: (walletId: string, accountId: string, assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get balance for specific asset, under a specific account
     * @summary Retrieve asset balance
     * @param {string} walletId Wallet Id
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAssetBalance: (walletId: string, accountId: string, assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get specific device for a specific s Wallet
     * @summary Get Embedded Wallet Device
     * @param {string} walletId Wallet Id
     * @param {string} deviceId Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletDevice: (walletId: string, deviceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the state of the specific device setup key under a specific Non Custodial Wallet
     * @summary Get device key setup state
     * @param {string} walletId Wallet Id
     * @param {string} deviceId Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletDeviceSetupState: (walletId: string, deviceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get wallet Latest Backup details, including the deviceId, and backup time
     * @summary Get wallet Latest Backup details
     * @param {string} walletId Wallet Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletLatestBackup: (walletId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the public key of an asset associated with a specific account within a Non-Custodial Wallet
     * @summary Get the public key of an asset
     * @param {string} xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} walletId The ID of the Non-Custodial wallet
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {number} change BIP44 derivation path - change value
     * @param {number} addressIndex BIP44 derivation path - index value
     * @param {boolean} [compressed] Compressed/Uncompressed public key format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletPublicKeyInfoForAddress: (xEndUserWalletId: string, walletId: string, accountId: string, assetId: string, change: number, addressIndex: number, compressed?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all the available supported assets for the Non-Custodial Wallet
     * @summary Retrieve supported assets
     * @param {string} [pageCursor] Next page cursor to fetch
     * @param {number} [pageSize] Items per page
     * @param {boolean} [onlyBaseAssets] Only base assets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletSupportedAssets: (pageCursor?: string, pageSize?: number, onlyBaseAssets?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all Non Custodial Wallets
     * @summary List wallets
     * @param {string} [pageCursor] Next page cursor to fetch
     * @param {number} [pageSize] Items per page
     * @param {GetEmbeddedWalletsSortEnum} [sort] Field(s) to use for sorting
     * @param {GetEmbeddedWalletsOrderEnum} [order] Is the order ascending or descending
     * @param {boolean} [enabled] Enabled Wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWallets: (pageCursor?: string, pageSize?: number, sort?: GetEmbeddedWalletsSortEnum, order?: GetEmbeddedWalletsOrderEnum, enabled?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the public key information based on derivation path and signing algorithm within a Non-Custodial Wallet
     * @summary Get the public key for a derivation path
     * @param {string} xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} walletId The ID of the Non-Custodial wallet
     * @param {string} derivationPath An array of integers (passed as JSON stringified array) representing the full BIP44 derivation path of the requested public key.  The first element must always be 44.
     * @param {GetPublicKeyInfoNcwAlgorithmEnum} algorithm Elliptic Curve
     * @param {boolean} [compressed] Compressed/Uncompressed public key format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicKeyInfoNcw: (xEndUserWalletId: string, walletId: string, derivationPath: string, algorithm: GetPublicKeyInfoNcwAlgorithmEnum, compressed?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Refresh the balance of an asset in a specific account
     * @summary Refresh asset balance
     * @param {string} walletId Wallet Id
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshEmbeddedWalletAssetBalance: (walletId: string, accountId: string, assetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EmbeddedWalletsApi - functional programming interface
 * @export
 */
export declare const EmbeddedWalletsApiFp: (configuration?: Configuration) => {
    /**
     * Get the addresses of a specific asset, under a specific account, under a specific Non Custodial Wallet
     * @summary Add asset to account
     * @param {string} walletId Wallet Id
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEmbeddedWalletAsset(walletId: string, accountId: string, assetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletAddressDetails>>;
    /**
     * Create new Non Custodial Wallet
     * @summary Create a new wallet
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmbeddedWallet(idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWallet>>;
    /**
     * Create a new account under a specific Non Custodial Wallet
     * @summary Create a new account
     * @param {string} walletId Wallet Id
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmbeddedWalletAccount(walletId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletAccount>>;
    /**
     * Get a wallet
     * @summary Get a wallet
     * @param {string} walletId Wallet Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWallet(walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWallet>>;
    /**
     * Get a specific account under a specific Non Custodial Wallet
     * @summary Get a account
     * @param {string} walletId WalletId
     * @param {string} accountId The ID of the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAccount(walletId: string, accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletAccount>>;
    /**
     * Get the addresses of a specific asset, under a specific account, under a specific Non Custodial Wallet
     * @summary Retrieve asset addresses
     * @param {string} walletId Wallet Id
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {string} [pageCursor] Cursor to the next page
     * @param {number} [pageSize] Items per page
     * @param {GetEmbeddedWalletAddressesSortEnum} [sort] Sort by address
     * @param {GetEmbeddedWalletAddressesOrderEnum} [order] Is the order ascending or descending
     * @param {boolean} [enabled] Enabled
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAddresses(walletId: string, accountId: string, assetId: string, pageCursor?: string, pageSize?: number, sort?: GetEmbeddedWalletAddressesSortEnum, order?: GetEmbeddedWalletAddressesOrderEnum, enabled?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletPaginatedAddressesResponse>>;
    /**
     * Get asset under a specific account, under a specific Non Custodial Wallet
     * @summary Retrieve asset
     * @param {string} walletId Wallet Id
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAsset(walletId: string, accountId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletAssetResponse>>;
    /**
     * Get balance for specific asset, under a specific account
     * @summary Retrieve asset balance
     * @param {string} walletId Wallet Id
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAssetBalance(walletId: string, accountId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletAssetBalance>>;
    /**
     * Get specific device for a specific s Wallet
     * @summary Get Embedded Wallet Device
     * @param {string} walletId Wallet Id
     * @param {string} deviceId Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletDevice(walletId: string, deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletDevice>>;
    /**
     * Get the state of the specific device setup key under a specific Non Custodial Wallet
     * @summary Get device key setup state
     * @param {string} walletId Wallet Id
     * @param {string} deviceId Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletDeviceSetupState(walletId: string, deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletDeviceKeySetupResponse>>;
    /**
     * Get wallet Latest Backup details, including the deviceId, and backup time
     * @summary Get wallet Latest Backup details
     * @param {string} walletId Wallet Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletLatestBackup(walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletLatestBackupResponse>>;
    /**
     * Gets the public key of an asset associated with a specific account within a Non-Custodial Wallet
     * @summary Get the public key of an asset
     * @param {string} xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} walletId The ID of the Non-Custodial wallet
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {number} change BIP44 derivation path - change value
     * @param {number} addressIndex BIP44 derivation path - index value
     * @param {boolean} [compressed] Compressed/Uncompressed public key format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletPublicKeyInfoForAddress(xEndUserWalletId: string, walletId: string, accountId: string, assetId: string, change: number, addressIndex: number, compressed?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKeyInformation>>;
    /**
     * Get all the available supported assets for the Non-Custodial Wallet
     * @summary Retrieve supported assets
     * @param {string} [pageCursor] Next page cursor to fetch
     * @param {number} [pageSize] Items per page
     * @param {boolean} [onlyBaseAssets] Only base assets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletSupportedAssets(pageCursor?: string, pageSize?: number, onlyBaseAssets?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletPaginatedAssetsResponse>>;
    /**
     * Get all Non Custodial Wallets
     * @summary List wallets
     * @param {string} [pageCursor] Next page cursor to fetch
     * @param {number} [pageSize] Items per page
     * @param {GetEmbeddedWalletsSortEnum} [sort] Field(s) to use for sorting
     * @param {GetEmbeddedWalletsOrderEnum} [order] Is the order ascending or descending
     * @param {boolean} [enabled] Enabled Wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWallets(pageCursor?: string, pageSize?: number, sort?: GetEmbeddedWalletsSortEnum, order?: GetEmbeddedWalletsOrderEnum, enabled?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletPaginatedWalletsResponse>>;
    /**
     * Gets the public key information based on derivation path and signing algorithm within a Non-Custodial Wallet
     * @summary Get the public key for a derivation path
     * @param {string} xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @param {string} walletId The ID of the Non-Custodial wallet
     * @param {string} derivationPath An array of integers (passed as JSON stringified array) representing the full BIP44 derivation path of the requested public key.  The first element must always be 44.
     * @param {GetPublicKeyInfoNcwAlgorithmEnum} algorithm Elliptic Curve
     * @param {boolean} [compressed] Compressed/Uncompressed public key format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicKeyInfoNcw(xEndUserWalletId: string, walletId: string, derivationPath: string, algorithm: GetPublicKeyInfoNcwAlgorithmEnum, compressed?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKeyInformation>>;
    /**
     * Refresh the balance of an asset in a specific account
     * @summary Refresh asset balance
     * @param {string} walletId Wallet Id
     * @param {string} accountId The ID of the account
     * @param {string} assetId The ID of the asset
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshEmbeddedWalletAssetBalance(walletId: string, accountId: string, assetId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedWalletAssetBalance>>;
};
/**
 * EmbeddedWalletsApi - factory interface
 * @export
 */
export declare const EmbeddedWalletsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get the addresses of a specific asset, under a specific account, under a specific Non Custodial Wallet
     * @summary Add asset to account
     * @param {EmbeddedWalletsApiAddEmbeddedWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEmbeddedWalletAsset(requestParameters: EmbeddedWalletsApiAddEmbeddedWalletAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletAddressDetails>;
    /**
     * Create new Non Custodial Wallet
     * @summary Create a new wallet
     * @param {EmbeddedWalletsApiCreateEmbeddedWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmbeddedWallet(requestParameters?: EmbeddedWalletsApiCreateEmbeddedWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWallet>;
    /**
     * Create a new account under a specific Non Custodial Wallet
     * @summary Create a new account
     * @param {EmbeddedWalletsApiCreateEmbeddedWalletAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmbeddedWalletAccount(requestParameters: EmbeddedWalletsApiCreateEmbeddedWalletAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletAccount>;
    /**
     * Get a wallet
     * @summary Get a wallet
     * @param {EmbeddedWalletsApiGetEmbeddedWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWallet(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWallet>;
    /**
     * Get a specific account under a specific Non Custodial Wallet
     * @summary Get a account
     * @param {EmbeddedWalletsApiGetEmbeddedWalletAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAccount(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletAccount>;
    /**
     * Get the addresses of a specific asset, under a specific account, under a specific Non Custodial Wallet
     * @summary Retrieve asset addresses
     * @param {EmbeddedWalletsApiGetEmbeddedWalletAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAddresses(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletAddressesRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletPaginatedAddressesResponse>;
    /**
     * Get asset under a specific account, under a specific Non Custodial Wallet
     * @summary Retrieve asset
     * @param {EmbeddedWalletsApiGetEmbeddedWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAsset(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletAssetResponse>;
    /**
     * Get balance for specific asset, under a specific account
     * @summary Retrieve asset balance
     * @param {EmbeddedWalletsApiGetEmbeddedWalletAssetBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletAssetBalance(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletAssetBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletAssetBalance>;
    /**
     * Get specific device for a specific s Wallet
     * @summary Get Embedded Wallet Device
     * @param {EmbeddedWalletsApiGetEmbeddedWalletDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletDevice(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletDevice>;
    /**
     * Get the state of the specific device setup key under a specific Non Custodial Wallet
     * @summary Get device key setup state
     * @param {EmbeddedWalletsApiGetEmbeddedWalletDeviceSetupStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletDeviceSetupState(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletDeviceSetupStateRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletDeviceKeySetupResponse>;
    /**
     * Get wallet Latest Backup details, including the deviceId, and backup time
     * @summary Get wallet Latest Backup details
     * @param {EmbeddedWalletsApiGetEmbeddedWalletLatestBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletLatestBackup(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletLatestBackupRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletLatestBackupResponse>;
    /**
     * Gets the public key of an asset associated with a specific account within a Non-Custodial Wallet
     * @summary Get the public key of an asset
     * @param {EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletPublicKeyInfoForAddress(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicKeyInformation>;
    /**
     * Get all the available supported assets for the Non-Custodial Wallet
     * @summary Retrieve supported assets
     * @param {EmbeddedWalletsApiGetEmbeddedWalletSupportedAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWalletSupportedAssets(requestParameters?: EmbeddedWalletsApiGetEmbeddedWalletSupportedAssetsRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletPaginatedAssetsResponse>;
    /**
     * Get all Non Custodial Wallets
     * @summary List wallets
     * @param {EmbeddedWalletsApiGetEmbeddedWalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmbeddedWallets(requestParameters?: EmbeddedWalletsApiGetEmbeddedWalletsRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletPaginatedWalletsResponse>;
    /**
     * Gets the public key information based on derivation path and signing algorithm within a Non-Custodial Wallet
     * @summary Get the public key for a derivation path
     * @param {EmbeddedWalletsApiGetPublicKeyInfoNcwRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicKeyInfoNcw(requestParameters: EmbeddedWalletsApiGetPublicKeyInfoNcwRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicKeyInformation>;
    /**
     * Refresh the balance of an asset in a specific account
     * @summary Refresh asset balance
     * @param {EmbeddedWalletsApiRefreshEmbeddedWalletAssetBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshEmbeddedWalletAssetBalance(requestParameters: EmbeddedWalletsApiRefreshEmbeddedWalletAssetBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddedWalletAssetBalance>;
};
/**
 * Request parameters for addEmbeddedWalletAsset operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiAddEmbeddedWalletAssetRequest
 */
export interface EmbeddedWalletsApiAddEmbeddedWalletAssetRequest {
    /**
     * Wallet Id
     * @type {string}
     * @memberof EmbeddedWalletsApiAddEmbeddedWalletAsset
     */
    readonly walletId: string;
    /**
     * The ID of the account
     * @type {string}
     * @memberof EmbeddedWalletsApiAddEmbeddedWalletAsset
     */
    readonly accountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof EmbeddedWalletsApiAddEmbeddedWalletAsset
     */
    readonly assetId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof EmbeddedWalletsApiAddEmbeddedWalletAsset
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createEmbeddedWallet operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiCreateEmbeddedWalletRequest
 */
export interface EmbeddedWalletsApiCreateEmbeddedWalletRequest {
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof EmbeddedWalletsApiCreateEmbeddedWallet
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for createEmbeddedWalletAccount operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiCreateEmbeddedWalletAccountRequest
 */
export interface EmbeddedWalletsApiCreateEmbeddedWalletAccountRequest {
    /**
     * Wallet Id
     * @type {string}
     * @memberof EmbeddedWalletsApiCreateEmbeddedWalletAccount
     */
    readonly walletId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof EmbeddedWalletsApiCreateEmbeddedWalletAccount
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for getEmbeddedWallet operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetEmbeddedWalletRequest
 */
export interface EmbeddedWalletsApiGetEmbeddedWalletRequest {
    /**
     * Wallet Id
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWallet
     */
    readonly walletId: string;
}
/**
 * Request parameters for getEmbeddedWalletAccount operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetEmbeddedWalletAccountRequest
 */
export interface EmbeddedWalletsApiGetEmbeddedWalletAccountRequest {
    /**
     * WalletId
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAccount
     */
    readonly walletId: string;
    /**
     * The ID of the account
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAccount
     */
    readonly accountId: string;
}
/**
 * Request parameters for getEmbeddedWalletAddresses operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetEmbeddedWalletAddressesRequest
 */
export interface EmbeddedWalletsApiGetEmbeddedWalletAddressesRequest {
    /**
     * Wallet Id
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAddresses
     */
    readonly walletId: string;
    /**
     * The ID of the account
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAddresses
     */
    readonly accountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAddresses
     */
    readonly assetId: string;
    /**
     * Cursor to the next page
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAddresses
     */
    readonly pageCursor?: string;
    /**
     * Items per page
     * @type {number}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAddresses
     */
    readonly pageSize?: number;
    /**
     * Sort by address
     * @type {'address' | 'createdAt'}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAddresses
     */
    readonly sort?: GetEmbeddedWalletAddressesSortEnum;
    /**
     * Is the order ascending or descending
     * @type {'DESC' | 'ASC'}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAddresses
     */
    readonly order?: GetEmbeddedWalletAddressesOrderEnum;
    /**
     * Enabled
     * @type {boolean}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAddresses
     */
    readonly enabled?: boolean;
}
/**
 * Request parameters for getEmbeddedWalletAsset operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetEmbeddedWalletAssetRequest
 */
export interface EmbeddedWalletsApiGetEmbeddedWalletAssetRequest {
    /**
     * Wallet Id
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAsset
     */
    readonly walletId: string;
    /**
     * The ID of the account
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAsset
     */
    readonly accountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAsset
     */
    readonly assetId: string;
}
/**
 * Request parameters for getEmbeddedWalletAssetBalance operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetEmbeddedWalletAssetBalanceRequest
 */
export interface EmbeddedWalletsApiGetEmbeddedWalletAssetBalanceRequest {
    /**
     * Wallet Id
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAssetBalance
     */
    readonly walletId: string;
    /**
     * The ID of the account
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAssetBalance
     */
    readonly accountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletAssetBalance
     */
    readonly assetId: string;
}
/**
 * Request parameters for getEmbeddedWalletDevice operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetEmbeddedWalletDeviceRequest
 */
export interface EmbeddedWalletsApiGetEmbeddedWalletDeviceRequest {
    /**
     * Wallet Id
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletDevice
     */
    readonly walletId: string;
    /**
     * Device Id
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletDevice
     */
    readonly deviceId: string;
}
/**
 * Request parameters for getEmbeddedWalletDeviceSetupState operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetEmbeddedWalletDeviceSetupStateRequest
 */
export interface EmbeddedWalletsApiGetEmbeddedWalletDeviceSetupStateRequest {
    /**
     * Wallet Id
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletDeviceSetupState
     */
    readonly walletId: string;
    /**
     * Device Id
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletDeviceSetupState
     */
    readonly deviceId: string;
}
/**
 * Request parameters for getEmbeddedWalletLatestBackup operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetEmbeddedWalletLatestBackupRequest
 */
export interface EmbeddedWalletsApiGetEmbeddedWalletLatestBackupRequest {
    /**
     * Wallet Id
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletLatestBackup
     */
    readonly walletId: string;
}
/**
 * Request parameters for getEmbeddedWalletPublicKeyInfoForAddress operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddressRequest
 */
export interface EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddressRequest {
    /**
     * Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddress
     */
    readonly xEndUserWalletId: string;
    /**
     * The ID of the Non-Custodial wallet
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddress
     */
    readonly walletId: string;
    /**
     * The ID of the account
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddress
     */
    readonly accountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddress
     */
    readonly assetId: string;
    /**
     * BIP44 derivation path - change value
     * @type {number}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddress
     */
    readonly change: number;
    /**
     * BIP44 derivation path - index value
     * @type {number}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddress
     */
    readonly addressIndex: number;
    /**
     * Compressed/Uncompressed public key format
     * @type {boolean}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddress
     */
    readonly compressed?: boolean;
}
/**
 * Request parameters for getEmbeddedWalletSupportedAssets operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetEmbeddedWalletSupportedAssetsRequest
 */
export interface EmbeddedWalletsApiGetEmbeddedWalletSupportedAssetsRequest {
    /**
     * Next page cursor to fetch
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletSupportedAssets
     */
    readonly pageCursor?: string;
    /**
     * Items per page
     * @type {number}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletSupportedAssets
     */
    readonly pageSize?: number;
    /**
     * Only base assets
     * @type {boolean}
     * @memberof EmbeddedWalletsApiGetEmbeddedWalletSupportedAssets
     */
    readonly onlyBaseAssets?: boolean;
}
/**
 * Request parameters for getEmbeddedWallets operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetEmbeddedWalletsRequest
 */
export interface EmbeddedWalletsApiGetEmbeddedWalletsRequest {
    /**
     * Next page cursor to fetch
     * @type {string}
     * @memberof EmbeddedWalletsApiGetEmbeddedWallets
     */
    readonly pageCursor?: string;
    /**
     * Items per page
     * @type {number}
     * @memberof EmbeddedWalletsApiGetEmbeddedWallets
     */
    readonly pageSize?: number;
    /**
     * Field(s) to use for sorting
     * @type {'createdAt'}
     * @memberof EmbeddedWalletsApiGetEmbeddedWallets
     */
    readonly sort?: GetEmbeddedWalletsSortEnum;
    /**
     * Is the order ascending or descending
     * @type {'ASC' | 'DESC'}
     * @memberof EmbeddedWalletsApiGetEmbeddedWallets
     */
    readonly order?: GetEmbeddedWalletsOrderEnum;
    /**
     * Enabled Wallets
     * @type {boolean}
     * @memberof EmbeddedWalletsApiGetEmbeddedWallets
     */
    readonly enabled?: boolean;
}
/**
 * Request parameters for getPublicKeyInfoNcw operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetPublicKeyInfoNcwRequest
 */
export interface EmbeddedWalletsApiGetPublicKeyInfoNcwRequest {
    /**
     * Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
     * @type {string}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoNcw
     */
    readonly xEndUserWalletId: string;
    /**
     * The ID of the Non-Custodial wallet
     * @type {string}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoNcw
     */
    readonly walletId: string;
    /**
     * An array of integers (passed as JSON stringified array) representing the full BIP44 derivation path of the requested public key.  The first element must always be 44.
     * @type {string}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoNcw
     */
    readonly derivationPath: string;
    /**
     * Elliptic Curve
     * @type {'MPC_ECDSA_SECP256K1' | 'MPC_ECDSA_SECP256R1' | 'MPC_EDDSA_ED25519'}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoNcw
     */
    readonly algorithm: GetPublicKeyInfoNcwAlgorithmEnum;
    /**
     * Compressed/Uncompressed public key format
     * @type {boolean}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoNcw
     */
    readonly compressed?: boolean;
}
/**
 * Request parameters for refreshEmbeddedWalletAssetBalance operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiRefreshEmbeddedWalletAssetBalanceRequest
 */
export interface EmbeddedWalletsApiRefreshEmbeddedWalletAssetBalanceRequest {
    /**
     * Wallet Id
     * @type {string}
     * @memberof EmbeddedWalletsApiRefreshEmbeddedWalletAssetBalance
     */
    readonly walletId: string;
    /**
     * The ID of the account
     * @type {string}
     * @memberof EmbeddedWalletsApiRefreshEmbeddedWalletAssetBalance
     */
    readonly accountId: string;
    /**
     * The ID of the asset
     * @type {string}
     * @memberof EmbeddedWalletsApiRefreshEmbeddedWalletAssetBalance
     */
    readonly assetId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof EmbeddedWalletsApiRefreshEmbeddedWalletAssetBalance
     */
    readonly idempotencyKey?: string;
}
/**
 * EmbeddedWalletsApi - object-oriented interface
 * @export
 * @class EmbeddedWalletsApi
 * @extends {BaseAPI}
 */
export declare class EmbeddedWalletsApi extends BaseAPI {
    /**
     * Get the addresses of a specific asset, under a specific account, under a specific Non Custodial Wallet
     * @summary Add asset to account
     * @param {EmbeddedWalletsApiAddEmbeddedWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    addEmbeddedWalletAsset(requestParameters: EmbeddedWalletsApiAddEmbeddedWalletAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletAddressDetails>>;
    /**
     * Create new Non Custodial Wallet
     * @summary Create a new wallet
     * @param {EmbeddedWalletsApiCreateEmbeddedWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    createEmbeddedWallet(requestParameters?: EmbeddedWalletsApiCreateEmbeddedWalletRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWallet>>;
    /**
     * Create a new account under a specific Non Custodial Wallet
     * @summary Create a new account
     * @param {EmbeddedWalletsApiCreateEmbeddedWalletAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    createEmbeddedWalletAccount(requestParameters: EmbeddedWalletsApiCreateEmbeddedWalletAccountRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletAccount>>;
    /**
     * Get a wallet
     * @summary Get a wallet
     * @param {EmbeddedWalletsApiGetEmbeddedWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getEmbeddedWallet(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWallet>>;
    /**
     * Get a specific account under a specific Non Custodial Wallet
     * @summary Get a account
     * @param {EmbeddedWalletsApiGetEmbeddedWalletAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getEmbeddedWalletAccount(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletAccountRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletAccount>>;
    /**
     * Get the addresses of a specific asset, under a specific account, under a specific Non Custodial Wallet
     * @summary Retrieve asset addresses
     * @param {EmbeddedWalletsApiGetEmbeddedWalletAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getEmbeddedWalletAddresses(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletAddressesRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletPaginatedAddressesResponse>>;
    /**
     * Get asset under a specific account, under a specific Non Custodial Wallet
     * @summary Retrieve asset
     * @param {EmbeddedWalletsApiGetEmbeddedWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getEmbeddedWalletAsset(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletAssetResponse>>;
    /**
     * Get balance for specific asset, under a specific account
     * @summary Retrieve asset balance
     * @param {EmbeddedWalletsApiGetEmbeddedWalletAssetBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getEmbeddedWalletAssetBalance(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletAssetBalanceRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletAssetBalance>>;
    /**
     * Get specific device for a specific s Wallet
     * @summary Get Embedded Wallet Device
     * @param {EmbeddedWalletsApiGetEmbeddedWalletDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getEmbeddedWalletDevice(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletDeviceRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletDevice>>;
    /**
     * Get the state of the specific device setup key under a specific Non Custodial Wallet
     * @summary Get device key setup state
     * @param {EmbeddedWalletsApiGetEmbeddedWalletDeviceSetupStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getEmbeddedWalletDeviceSetupState(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletDeviceSetupStateRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletDeviceKeySetupResponse>>;
    /**
     * Get wallet Latest Backup details, including the deviceId, and backup time
     * @summary Get wallet Latest Backup details
     * @param {EmbeddedWalletsApiGetEmbeddedWalletLatestBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getEmbeddedWalletLatestBackup(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletLatestBackupRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletLatestBackupResponse>>;
    /**
     * Gets the public key of an asset associated with a specific account within a Non-Custodial Wallet
     * @summary Get the public key of an asset
     * @param {EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getEmbeddedWalletPublicKeyInfoForAddress(requestParameters: EmbeddedWalletsApiGetEmbeddedWalletPublicKeyInfoForAddressRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<PublicKeyInformation>>;
    /**
     * Get all the available supported assets for the Non-Custodial Wallet
     * @summary Retrieve supported assets
     * @param {EmbeddedWalletsApiGetEmbeddedWalletSupportedAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getEmbeddedWalletSupportedAssets(requestParameters?: EmbeddedWalletsApiGetEmbeddedWalletSupportedAssetsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletPaginatedAssetsResponse>>;
    /**
     * Get all Non Custodial Wallets
     * @summary List wallets
     * @param {EmbeddedWalletsApiGetEmbeddedWalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getEmbeddedWallets(requestParameters?: EmbeddedWalletsApiGetEmbeddedWalletsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletPaginatedWalletsResponse>>;
    /**
     * Gets the public key information based on derivation path and signing algorithm within a Non-Custodial Wallet
     * @summary Get the public key for a derivation path
     * @param {EmbeddedWalletsApiGetPublicKeyInfoNcwRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    getPublicKeyInfoNcw(requestParameters: EmbeddedWalletsApiGetPublicKeyInfoNcwRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<PublicKeyInformation>>;
    /**
     * Refresh the balance of an asset in a specific account
     * @summary Refresh asset balance
     * @param {EmbeddedWalletsApiRefreshEmbeddedWalletAssetBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    refreshEmbeddedWalletAssetBalance(requestParameters: EmbeddedWalletsApiRefreshEmbeddedWalletAssetBalanceRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<EmbeddedWalletAssetBalance>>;
}
/**
 * @export
 */
export declare const GetEmbeddedWalletAddressesSortEnum: {
    readonly Address: "address";
    readonly CreatedAt: "createdAt";
};
export type GetEmbeddedWalletAddressesSortEnum = typeof GetEmbeddedWalletAddressesSortEnum[keyof typeof GetEmbeddedWalletAddressesSortEnum];
/**
 * @export
 */
export declare const GetEmbeddedWalletAddressesOrderEnum: {
    readonly Desc: "DESC";
    readonly Asc: "ASC";
};
export type GetEmbeddedWalletAddressesOrderEnum = typeof GetEmbeddedWalletAddressesOrderEnum[keyof typeof GetEmbeddedWalletAddressesOrderEnum];
/**
 * @export
 */
export declare const GetEmbeddedWalletsSortEnum: {
    readonly CreatedAt: "createdAt";
};
export type GetEmbeddedWalletsSortEnum = typeof GetEmbeddedWalletsSortEnum[keyof typeof GetEmbeddedWalletsSortEnum];
/**
 * @export
 */
export declare const GetEmbeddedWalletsOrderEnum: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type GetEmbeddedWalletsOrderEnum = typeof GetEmbeddedWalletsOrderEnum[keyof typeof GetEmbeddedWalletsOrderEnum];
/**
 * @export
 */
export declare const GetPublicKeyInfoNcwAlgorithmEnum: {
    readonly EcdsaSecp256K1: "MPC_ECDSA_SECP256K1";
    readonly EcdsaSecp256R1: "MPC_ECDSA_SECP256R1";
    readonly EddsaEd25519: "MPC_EDDSA_ED25519";
};
export type GetPublicKeyInfoNcwAlgorithmEnum = typeof GetPublicKeyInfoNcwAlgorithmEnum[keyof typeof GetPublicKeyInfoNcwAlgorithmEnum];
