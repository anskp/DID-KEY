"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateFullTravelRuleTransactionNotationEnum = exports.GetVASPsReviewValueEnum = exports.GetVASPsFieldsEnum = exports.GetVASPsOrderEnum = exports.GetVASPByDIDFieldsEnum = exports.TravelRuleApi = exports.TravelRuleApiFactory = exports.TravelRuleApiFp = exports.TravelRuleApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
var fireblocksResponse_1 = require("../response/fireblocksResponse");
// URLSearchParams not necessarily used
// @ts-ignore
var url_1 = require("url");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
var validation_utils_1 = require("../utils/validation_utils");
// @ts-ignore
var base_1 = require("../base");
/**
 * TravelRuleApi - axios parameter creator
 * @export
 */
var TravelRuleApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get VASP Details.  Returns information about a VASP that has the specified DID.
         * @summary Get VASP details
         * @param {string} did
         * @param {Array<GetVASPByDIDFieldsEnum>} [fields] A CSV of fields to return. Choose from the following options:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVASPByDID: function (did, fields, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('getVASPByDID', 'did', did);
                    localVarPath = "/screening/travel_rule/vasp/{did}"
                        .replace("{".concat("did", "}"), encodeURIComponent(String(did)));
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (fields) {
                        localVarQueryParameter['fields'] = fields;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted.
         * @summary Get All VASPs
         * @param {GetVASPsOrderEnum} [order] Field to order by
         * @param {number} [pageSize] Records per page
         * @param {Array<GetVASPsFieldsEnum>} [fields] CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
         * @param {string} [search] Search query
         * @param {GetVASPsReviewValueEnum} [reviewValue] Filter by the VASP\&#39;s review status. Possible values include: \&quot;TRUSTED\&quot;, \&quot;BLOCKED\&quot;, \&quot;MANUAL\&quot;, or \&quot;NULL\&quot;. When provided, only VASPs that match the specified reviewValue will be returned (i.e., VASPs that have already been reviewed to this status).
         * @param {string} [pageCursor] Cursor for pagination. When provided, the response will include the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVASPs: function (order, pageSize, fields, search, reviewValue, pageCursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/screening/travel_rule/vasp";
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (order !== undefined) {
                        localVarQueryParameter['order'] = order;
                    }
                    if (pageSize !== undefined) {
                        localVarQueryParameter['pageSize'] = pageSize;
                    }
                    if (fields) {
                        localVarQueryParameter['fields'] = fields;
                    }
                    if (search !== undefined) {
                        localVarQueryParameter['search'] = search;
                    }
                    if (reviewValue !== undefined) {
                        localVarQueryParameter['reviewValue'] = reviewValue;
                    }
                    if (pageCursor !== undefined) {
                        localVarQueryParameter['pageCursor'] = pageCursor;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get assigned VASP Did for a specific vault. Returns empty string vaspDid value in response if none assigned.
         * @summary Get assigned VASP to vault
         * @param {string} vaultAccountId The ID of the vault account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaspForVault: function (vaultAccountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('getVaspForVault', 'vaultAccountId', vaultAccountId);
                    localVarPath = "/screening/travel_rule/vault/{vaultAccountId}/vasp"
                        .replace("{".concat("vaultAccountId", "}"), encodeURIComponent(String(vaultAccountId)));
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Sets the VASP Did for a specific vault. Pass empty string to remove existing one.
         * @summary Assign VASP to vault
         * @param {TravelRuleVaspForVault} travelRuleVaspForVault
         * @param {string} vaultAccountId The ID of the vault account
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVaspForVault: function (travelRuleVaspForVault, vaultAccountId, idempotencyKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    (0, common_1.assertParamExists)('setVaspForVault', 'travelRuleVaspForVault', travelRuleVaspForVault);
                    (0, validation_utils_1.assertParamExistsAndNotEmpty)('setVaspForVault', 'vaultAccountId', vaultAccountId);
                    localVarPath = "/screening/travel_rule/vault/{vaultAccountId}/vasp"
                        .replace("{".concat("vaultAccountId", "}"), encodeURIComponent(String(vaultAccountId)));
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (idempotencyKey != null) {
                        localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(travelRuleVaspForVault, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.
         * @summary Add jsonDidKey to VASP details
         * @param {TravelRuleUpdateVASPDetails} travelRuleUpdateVASPDetails
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVasp: function (travelRuleUpdateVASPDetails, idempotencyKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    (0, common_1.assertParamExists)('updateVasp', 'travelRuleUpdateVASPDetails', travelRuleUpdateVASPDetails);
                    localVarPath = "/screening/travel_rule/vasp/update";
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (idempotencyKey != null) {
                        localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(travelRuleUpdateVASPDetails, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.
         * @summary Validate Full Travel Rule Transaction
         * @param {TravelRuleValidateFullTransactionRequest} travelRuleValidateFullTransactionRequest
         * @param {Array<ValidateFullTravelRuleTransactionNotationEnum>} [notation] Specifies the notation of the transaction. Possible values are: - &#x60;notabene&#x60;: Uses Notabene notation (default behavior). - &#x60;fireblocks&#x60;: Uses Fireblocks notation, with automatic translation of asset tickers and amounts. - &#x60;&lt;none&gt;&#x60;: Defaults to &#x60;notabene&#x60; for backward compatibility. **Note:** The default value for the &#x60;notation&#x60; parameter will change from &#x60;notabene&#x60; to &#x60;fireblocks&#x60; Update your integrations accordingly.
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFullTravelRuleTransaction: function (travelRuleValidateFullTransactionRequest, notation, idempotencyKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    (0, common_1.assertParamExists)('validateFullTravelRuleTransaction', 'travelRuleValidateFullTransactionRequest', travelRuleValidateFullTransactionRequest);
                    localVarPath = "/screening/travel_rule/transaction/validate/full";
                    localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (notation) {
                        localVarQueryParameter['notation'] = notation;
                    }
                    if (idempotencyKey != null) {
                        localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(travelRuleValidateFullTransactionRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.TravelRuleApiAxiosParamCreator = TravelRuleApiAxiosParamCreator;
/**
 * TravelRuleApi - functional programming interface
 * @export
 */
var TravelRuleApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TravelRuleApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get VASP Details.  Returns information about a VASP that has the specified DID.
         * @summary Get VASP details
         * @param {string} did
         * @param {Array<GetVASPByDIDFieldsEnum>} [fields] A CSV of fields to return. Choose from the following options:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVASPByDID: function (did, fields, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVASPByDID(did, fields, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TravelRuleApi.getVASPByDID']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted.
         * @summary Get All VASPs
         * @param {GetVASPsOrderEnum} [order] Field to order by
         * @param {number} [pageSize] Records per page
         * @param {Array<GetVASPsFieldsEnum>} [fields] CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
         * @param {string} [search] Search query
         * @param {GetVASPsReviewValueEnum} [reviewValue] Filter by the VASP\&#39;s review status. Possible values include: \&quot;TRUSTED\&quot;, \&quot;BLOCKED\&quot;, \&quot;MANUAL\&quot;, or \&quot;NULL\&quot;. When provided, only VASPs that match the specified reviewValue will be returned (i.e., VASPs that have already been reviewed to this status).
         * @param {string} [pageCursor] Cursor for pagination. When provided, the response will include the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVASPs: function (order, pageSize, fields, search, reviewValue, pageCursor, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVASPs(order, pageSize, fields, search, reviewValue, pageCursor, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TravelRuleApi.getVASPs']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get assigned VASP Did for a specific vault. Returns empty string vaspDid value in response if none assigned.
         * @summary Get assigned VASP to vault
         * @param {string} vaultAccountId The ID of the vault account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaspForVault: function (vaultAccountId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaspForVault(vaultAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TravelRuleApi.getVaspForVault']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Sets the VASP Did for a specific vault. Pass empty string to remove existing one.
         * @summary Assign VASP to vault
         * @param {TravelRuleVaspForVault} travelRuleVaspForVault
         * @param {string} vaultAccountId The ID of the vault account
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVaspForVault: function (travelRuleVaspForVault, vaultAccountId, idempotencyKey, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setVaspForVault(travelRuleVaspForVault, vaultAccountId, idempotencyKey, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TravelRuleApi.setVaspForVault']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.
         * @summary Add jsonDidKey to VASP details
         * @param {TravelRuleUpdateVASPDetails} travelRuleUpdateVASPDetails
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVasp: function (travelRuleUpdateVASPDetails, idempotencyKey, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateVasp(travelRuleUpdateVASPDetails, idempotencyKey, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TravelRuleApi.updateVasp']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.
         * @summary Validate Full Travel Rule Transaction
         * @param {TravelRuleValidateFullTransactionRequest} travelRuleValidateFullTransactionRequest
         * @param {Array<ValidateFullTravelRuleTransactionNotationEnum>} [notation] Specifies the notation of the transaction. Possible values are: - &#x60;notabene&#x60;: Uses Notabene notation (default behavior). - &#x60;fireblocks&#x60;: Uses Fireblocks notation, with automatic translation of asset tickers and amounts. - &#x60;&lt;none&gt;&#x60;: Defaults to &#x60;notabene&#x60; for backward compatibility. **Note:** The default value for the &#x60;notation&#x60; parameter will change from &#x60;notabene&#x60; to &#x60;fireblocks&#x60; Update your integrations accordingly.
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFullTravelRuleTransaction: function (travelRuleValidateFullTransactionRequest, notation, idempotencyKey, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validateFullTravelRuleTransaction(travelRuleValidateFullTransactionRequest, notation, idempotencyKey, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TravelRuleApi.validateFullTravelRuleTransaction']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.TravelRuleApiFp = TravelRuleApiFp;
/**
 * TravelRuleApi - factory interface
 * @export
 */
var TravelRuleApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TravelRuleApiFp)(configuration);
    return {
        /**
         * Get VASP Details.  Returns information about a VASP that has the specified DID.
         * @summary Get VASP details
         * @param {TravelRuleApiGetVASPByDIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVASPByDID: function (requestParameters, options) {
            return localVarFp.getVASPByDID(requestParameters.did, requestParameters.fields, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted.
         * @summary Get All VASPs
         * @param {TravelRuleApiGetVASPsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVASPs: function (requestParameters, options) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return localVarFp.getVASPs(requestParameters.order, requestParameters.pageSize, requestParameters.fields, requestParameters.search, requestParameters.reviewValue, requestParameters.pageCursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get assigned VASP Did for a specific vault. Returns empty string vaspDid value in response if none assigned.
         * @summary Get assigned VASP to vault
         * @param {TravelRuleApiGetVaspForVaultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaspForVault: function (requestParameters, options) {
            return localVarFp.getVaspForVault(requestParameters.vaultAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets the VASP Did for a specific vault. Pass empty string to remove existing one.
         * @summary Assign VASP to vault
         * @param {TravelRuleApiSetVaspForVaultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVaspForVault: function (requestParameters, options) {
            return localVarFp.setVaspForVault(requestParameters.travelRuleVaspForVault, requestParameters.vaultAccountId, requestParameters.idempotencyKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.
         * @summary Add jsonDidKey to VASP details
         * @param {TravelRuleApiUpdateVaspRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVasp: function (requestParameters, options) {
            return localVarFp.updateVasp(requestParameters.travelRuleUpdateVASPDetails, requestParameters.idempotencyKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.
         * @summary Validate Full Travel Rule Transaction
         * @param {TravelRuleApiValidateFullTravelRuleTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFullTravelRuleTransaction: function (requestParameters, options) {
            return localVarFp.validateFullTravelRuleTransaction(requestParameters.travelRuleValidateFullTransactionRequest, requestParameters.notation, requestParameters.idempotencyKey, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TravelRuleApiFactory = TravelRuleApiFactory;
/**
 * TravelRuleApi - object-oriented interface
 * @export
 * @class TravelRuleApi
 * @extends {BaseAPI}
 */
var TravelRuleApi = /** @class */ (function (_super) {
    __extends(TravelRuleApi, _super);
    function TravelRuleApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get VASP Details.  Returns information about a VASP that has the specified DID.
     * @summary Get VASP details
     * @param {TravelRuleApiGetVASPByDIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    TravelRuleApi.prototype.getVASPByDID = function (requestParameters) {
        var _this = this;
        return (0, exports.TravelRuleApiFp)(this.configuration).getVASPByDID(requestParameters.did, requestParameters.fields).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted.
     * @summary Get All VASPs
     * @param {TravelRuleApiGetVASPsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    TravelRuleApi.prototype.getVASPs = function (requestParameters) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TravelRuleApiFp)(this.configuration).getVASPs(requestParameters.order, requestParameters.pageSize, requestParameters.fields, requestParameters.search, requestParameters.reviewValue, requestParameters.pageCursor).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Get assigned VASP Did for a specific vault. Returns empty string vaspDid value in response if none assigned.
     * @summary Get assigned VASP to vault
     * @param {TravelRuleApiGetVaspForVaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    TravelRuleApi.prototype.getVaspForVault = function (requestParameters) {
        var _this = this;
        return (0, exports.TravelRuleApiFp)(this.configuration).getVaspForVault(requestParameters.vaultAccountId).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Sets the VASP Did for a specific vault. Pass empty string to remove existing one.
     * @summary Assign VASP to vault
     * @param {TravelRuleApiSetVaspForVaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    TravelRuleApi.prototype.setVaspForVault = function (requestParameters) {
        var _this = this;
        return (0, exports.TravelRuleApiFp)(this.configuration).setVaspForVault(requestParameters.travelRuleVaspForVault, requestParameters.vaultAccountId, requestParameters.idempotencyKey).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.
     * @summary Add jsonDidKey to VASP details
     * @param {TravelRuleApiUpdateVaspRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    TravelRuleApi.prototype.updateVasp = function (requestParameters) {
        var _this = this;
        return (0, exports.TravelRuleApiFp)(this.configuration).updateVasp(requestParameters.travelRuleUpdateVASPDetails, requestParameters.idempotencyKey).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    /**
     * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.
     * @summary Validate Full Travel Rule Transaction
     * @param {TravelRuleApiValidateFullTravelRuleTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    TravelRuleApi.prototype.validateFullTravelRuleTransaction = function (requestParameters) {
        var _this = this;
        return (0, exports.TravelRuleApiFp)(this.configuration).validateFullTravelRuleTransaction(requestParameters.travelRuleValidateFullTransactionRequest, requestParameters.notation, requestParameters.idempotencyKey).then(function (request) { return request(_this.axios, _this.basePath); }).then(fireblocksResponse_1.convertToFireblocksResponse);
    };
    return TravelRuleApi;
}(base_1.BaseAPI));
exports.TravelRuleApi = TravelRuleApi;
/**
 * @export
 */
exports.GetVASPByDIDFieldsEnum = {
    Did: 'did',
    Name: 'name',
    VerificationStatus: 'verificationStatus',
    AddressLine1: 'addressLine1',
    AddressLine2: 'addressLine2',
    City: 'city',
    Country: 'country',
    EmailDomains: 'emailDomains',
    Website: 'website',
    Logo: 'logo',
    LegalStructure: 'legalStructure',
    LegalName: 'legalName',
    YearFounded: 'yearFounded',
    IncorporationCountry: 'incorporationCountry',
    IsRegulated: 'isRegulated',
    OtherNames: 'otherNames',
    IdentificationType: 'identificationType',
    IdentificationCountry: 'identificationCountry',
    BusinessNumber: 'businessNumber',
    RegulatoryAuthorities: 'regulatoryAuthorities',
    Jurisdictions: 'jurisdictions',
    Street: 'street',
    Number: 'number',
    Unit: 'unit',
    PostCode: 'postCode',
    State: 'state',
    Certificates: 'certificates',
    Description: 'description',
    TravelRuleOpenvasp: 'travelRule_OPENVASP',
    TravelRuleSygna: 'travelRule_SYGNA',
    TravelRuleTrisa: 'travelRule_TRISA',
    TravelRuleTrlight: 'travelRule_TRLIGHT',
    TravelRuleEmail: 'travelRule_EMAIL',
    TravelRuleTrp: 'travelRule_TRP',
    TravelRuleShyft: 'travelRule_SHYFT',
    TravelRuleUstravelrulewg: 'travelRule_USTRAVELRULEWG',
    CreatedAt: 'createdAt',
    CreatedBy: 'createdBy',
    UpdatedAt: 'updatedAt',
    UpdatedBy: 'updatedBy',
    LastSentDate: 'lastSentDate',
    LastReceivedDate: 'lastReceivedDate',
    Documents: 'documents',
    HasAdmin: 'hasAdmin',
    IsNotifiable: 'isNotifiable',
    Issuers: 'issuers'
};
/**
 * @export
 */
exports.GetVASPsOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
};
/**
 * @export
 */
exports.GetVASPsFieldsEnum = {
    Did: 'did',
    Name: 'name',
    VerificationStatus: 'verificationStatus',
    AddressLine1: 'addressLine1',
    AddressLine2: 'addressLine2',
    City: 'city',
    Country: 'country',
    EmailDomains: 'emailDomains',
    Website: 'website',
    Logo: 'logo',
    LegalStructure: 'legalStructure',
    LegalName: 'legalName',
    YearFounded: 'yearFounded',
    IncorporationCountry: 'incorporationCountry',
    IsRegulated: 'isRegulated',
    OtherNames: 'otherNames',
    IdentificationType: 'identificationType',
    IdentificationCountry: 'identificationCountry',
    BusinessNumber: 'businessNumber',
    RegulatoryAuthorities: 'regulatoryAuthorities',
    Jurisdictions: 'jurisdictions',
    Street: 'street',
    Number: 'number',
    Unit: 'unit',
    PostCode: 'postCode',
    State: 'state',
    Certificates: 'certificates',
    Description: 'description',
    TravelRuleOpenvasp: 'travelRule_OPENVASP',
    TravelRuleSygna: 'travelRule_SYGNA',
    TravelRuleTrisa: 'travelRule_TRISA',
    TravelRuleTrlight: 'travelRule_TRLIGHT',
    TravelRuleEmail: 'travelRule_EMAIL',
    TravelRuleTrp: 'travelRule_TRP',
    TravelRuleShyft: 'travelRule_SHYFT',
    TravelRuleUstravelrulewg: 'travelRule_USTRAVELRULEWG',
    CreatedAt: 'createdAt',
    CreatedBy: 'createdBy',
    UpdatedAt: 'updatedAt',
    UpdatedBy: 'updatedBy',
    LastSentDate: 'lastSentDate',
    LastReceivedDate: 'lastReceivedDate',
    Documents: 'documents',
    HasAdmin: 'hasAdmin',
    IsNotifiable: 'isNotifiable',
    Issuers: 'issuers'
};
/**
 * @export
 */
exports.GetVASPsReviewValueEnum = {
    Trusted: 'TRUSTED',
    Blocked: 'BLOCKED',
    Manual: 'MANUAL',
    Null: 'null'
};
/**
 * @export
 */
exports.ValidateFullTravelRuleTransactionNotationEnum = {
    Fireblocks: 'fireblocks',
    Notabene: 'notabene'
};
//# sourceMappingURL=travel-rule-api.js.map