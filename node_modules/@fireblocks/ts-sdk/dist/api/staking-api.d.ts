/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { ChainDescriptor } from '../models';
import { ChainInfoResponse } from '../models';
import { ClaimRewardsRequest } from '../models';
import { Delegation } from '../models';
import { DelegationSummary } from '../models';
import { SplitRequest } from '../models';
import { SplitResponse } from '../models';
import { StakeRequest } from '../models';
import { StakeResponse } from '../models';
import { StakingGetAllDelegationsResponse } from '../models';
import { StakingGetChainsResponse } from '../models';
import { StakingGetProvidersResponse } from '../models';
import { StakingGetSummaryByVaultResponse } from '../models';
import { StakingProvider } from '../models';
import { UnstakeRequest } from '../models';
import { WithdrawRequest } from '../models';
/**
 * StakingApi - axios parameter creator
 * @export
 */
export declare const StakingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Approve the terms of service of the staking provider. This must be called before performing a staking action for the first time with this provider.
     * @summary Approve staking terms of service
     * @param {StakingProvider} providerId The unique identifier of the staking provider
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTermsOfServiceByProviderId: (providerId: StakingProvider, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Perform a chain-specific Claim Rewards.
     * @summary Execute a Claim Rewards operation
     * @param {ClaimRewardsRequest} claimRewardsRequest
     * @param {ClaimRewardsChainDescriptorEnum} chainDescriptor The protocol identifier (e.g. \&quot;MATIC\&quot;/\&quot;SOL\&quot;) to use
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    claimRewards: (claimRewardsRequest: ClaimRewardsRequest, chainDescriptor: ClaimRewardsChainDescriptorEnum, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return detailed information on all staking positions, including the staked amount, rewards, status and more.
     * @summary List staking positions details
     * @param {ChainDescriptor} [chainDescriptor] Use \&quot;ETH\&quot; / \&quot;SOL\&quot; / \&quot;MATIC\&quot; / \&quot;STETH_ETH\&quot; in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDelegations: (chainDescriptor?: ChainDescriptor, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return chain-specific, staking-related information summary (e.g. epoch details, lockup durations, estimated rewards, etc.)
     * @summary Get chain-specific staking summary
     * @param {ChainDescriptor} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;/\&quot;STETH_ETH\&quot;) to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChainInfo: (chainDescriptor: ChainDescriptor, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return an alphabetical list of supported chains.
     * @summary List staking supported chains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChains: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return detailed information on a staking position, including the staked amount, rewards, status and more.
     * @summary Get staking position details
     * @param {string} id The unique identifier of the staking position
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegationById: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return information on all the available staking providers.
     * @summary List staking providers details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProviders: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return a summary of all vaults, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary Get staking summary details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummary: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return a summary for each vault, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary Get staking summary details by vault
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummaryByVault: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Perform a Solana Split stake account.
     * @summary Execute a Split operation on SOL/SOL_TEST stake account
     * @param {SplitRequest} splitRequest
     * @param {SplitChainDescriptorEnum} chainDescriptor The protocol identifier (e.g. \&quot;SOL\&quot;/\&quot;SOL_TEST\&quot;) to use
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    split: (splitRequest: SplitRequest, chainDescriptor: SplitChainDescriptorEnum, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Perform a chain-specific Stake.
     * @summary Initiate Stake Operation
     * @param {StakeRequest} stakeRequest
     * @param {ChainDescriptor} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stake: (stakeRequest: StakeRequest, chainDescriptor: ChainDescriptor, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Execute an Unstake operation
     * @summary Execute an Unstake operation
     * @param {UnstakeRequest} unstakeRequest
     * @param {ChainDescriptor} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstake: (unstakeRequest: UnstakeRequest, chainDescriptor: ChainDescriptor, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Perform a chain-specific Withdraw.
     * @summary Execute a Withdraw operation
     * @param {WithdrawRequest} withdrawRequest
     * @param {ChainDescriptor} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    withdraw: (withdrawRequest: WithdrawRequest, chainDescriptor: ChainDescriptor, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StakingApi - functional programming interface
 * @export
 */
export declare const StakingApiFp: (configuration?: Configuration) => {
    /**
     * Approve the terms of service of the staking provider. This must be called before performing a staking action for the first time with this provider.
     * @summary Approve staking terms of service
     * @param {StakingProvider} providerId The unique identifier of the staking provider
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTermsOfServiceByProviderId(providerId: StakingProvider, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Perform a chain-specific Claim Rewards.
     * @summary Execute a Claim Rewards operation
     * @param {ClaimRewardsRequest} claimRewardsRequest
     * @param {ClaimRewardsChainDescriptorEnum} chainDescriptor The protocol identifier (e.g. \&quot;MATIC\&quot;/\&quot;SOL\&quot;) to use
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    claimRewards(claimRewardsRequest: ClaimRewardsRequest, chainDescriptor: ClaimRewardsChainDescriptorEnum, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Return detailed information on all staking positions, including the staked amount, rewards, status and more.
     * @summary List staking positions details
     * @param {ChainDescriptor} [chainDescriptor] Use \&quot;ETH\&quot; / \&quot;SOL\&quot; / \&quot;MATIC\&quot; / \&quot;STETH_ETH\&quot; in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDelegations(chainDescriptor?: ChainDescriptor, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakingGetAllDelegationsResponse>>;
    /**
     * Return chain-specific, staking-related information summary (e.g. epoch details, lockup durations, estimated rewards, etc.)
     * @summary Get chain-specific staking summary
     * @param {ChainDescriptor} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;/\&quot;STETH_ETH\&quot;) to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChainInfo(chainDescriptor: ChainDescriptor, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainInfoResponse>>;
    /**
     * Return an alphabetical list of supported chains.
     * @summary List staking supported chains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChains(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakingGetChainsResponse>>;
    /**
     * Return detailed information on a staking position, including the staked amount, rewards, status and more.
     * @summary Get staking position details
     * @param {string} id The unique identifier of the staking position
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegationById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Delegation>>;
    /**
     * Return information on all the available staking providers.
     * @summary List staking providers details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProviders(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakingGetProvidersResponse>>;
    /**
     * Return a summary of all vaults, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary Get staking summary details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummary(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegationSummary>>;
    /**
     * Return a summary for each vault, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary Get staking summary details by vault
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummaryByVault(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakingGetSummaryByVaultResponse>>;
    /**
     * Perform a Solana Split stake account.
     * @summary Execute a Split operation on SOL/SOL_TEST stake account
     * @param {SplitRequest} splitRequest
     * @param {SplitChainDescriptorEnum} chainDescriptor The protocol identifier (e.g. \&quot;SOL\&quot;/\&quot;SOL_TEST\&quot;) to use
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    split(splitRequest: SplitRequest, chainDescriptor: SplitChainDescriptorEnum, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SplitResponse>>;
    /**
     * Perform a chain-specific Stake.
     * @summary Initiate Stake Operation
     * @param {StakeRequest} stakeRequest
     * @param {ChainDescriptor} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stake(stakeRequest: StakeRequest, chainDescriptor: ChainDescriptor, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakeResponse>>;
    /**
     * Execute an Unstake operation
     * @summary Execute an Unstake operation
     * @param {UnstakeRequest} unstakeRequest
     * @param {ChainDescriptor} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstake(unstakeRequest: UnstakeRequest, chainDescriptor: ChainDescriptor, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Perform a chain-specific Withdraw.
     * @summary Execute a Withdraw operation
     * @param {WithdrawRequest} withdrawRequest
     * @param {ChainDescriptor} chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    withdraw(withdrawRequest: WithdrawRequest, chainDescriptor: ChainDescriptor, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * StakingApi - factory interface
 * @export
 */
export declare const StakingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Approve the terms of service of the staking provider. This must be called before performing a staking action for the first time with this provider.
     * @summary Approve staking terms of service
     * @param {StakingApiApproveTermsOfServiceByProviderIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTermsOfServiceByProviderId(requestParameters: StakingApiApproveTermsOfServiceByProviderIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Perform a chain-specific Claim Rewards.
     * @summary Execute a Claim Rewards operation
     * @param {StakingApiClaimRewardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    claimRewards(requestParameters: StakingApiClaimRewardsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Return detailed information on all staking positions, including the staked amount, rewards, status and more.
     * @summary List staking positions details
     * @param {StakingApiGetAllDelegationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllDelegations(requestParameters?: StakingApiGetAllDelegationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<StakingGetAllDelegationsResponse>;
    /**
     * Return chain-specific, staking-related information summary (e.g. epoch details, lockup durations, estimated rewards, etc.)
     * @summary Get chain-specific staking summary
     * @param {StakingApiGetChainInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChainInfo(requestParameters: StakingApiGetChainInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainInfoResponse>;
    /**
     * Return an alphabetical list of supported chains.
     * @summary List staking supported chains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChains(options?: RawAxiosRequestConfig): AxiosPromise<StakingGetChainsResponse>;
    /**
     * Return detailed information on a staking position, including the staked amount, rewards, status and more.
     * @summary Get staking position details
     * @param {StakingApiGetDelegationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelegationById(requestParameters: StakingApiGetDelegationByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Delegation>;
    /**
     * Return information on all the available staking providers.
     * @summary List staking providers details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProviders(options?: RawAxiosRequestConfig): AxiosPromise<StakingGetProvidersResponse>;
    /**
     * Return a summary of all vaults, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary Get staking summary details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummary(options?: RawAxiosRequestConfig): AxiosPromise<DelegationSummary>;
    /**
     * Return a summary for each vault, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary Get staking summary details by vault
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummaryByVault(options?: RawAxiosRequestConfig): AxiosPromise<StakingGetSummaryByVaultResponse>;
    /**
     * Perform a Solana Split stake account.
     * @summary Execute a Split operation on SOL/SOL_TEST stake account
     * @param {StakingApiSplitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    split(requestParameters: StakingApiSplitRequest, options?: RawAxiosRequestConfig): AxiosPromise<SplitResponse>;
    /**
     * Perform a chain-specific Stake.
     * @summary Initiate Stake Operation
     * @param {StakingApiStakeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stake(requestParameters: StakingApiStakeRequest, options?: RawAxiosRequestConfig): AxiosPromise<StakeResponse>;
    /**
     * Execute an Unstake operation
     * @summary Execute an Unstake operation
     * @param {StakingApiUnstakeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstake(requestParameters: StakingApiUnstakeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Perform a chain-specific Withdraw.
     * @summary Execute a Withdraw operation
     * @param {StakingApiWithdrawRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    withdraw(requestParameters: StakingApiWithdrawRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for approveTermsOfServiceByProviderId operation in StakingApi.
 * @export
 * @interface StakingApiApproveTermsOfServiceByProviderIdRequest
 */
export interface StakingApiApproveTermsOfServiceByProviderIdRequest {
    /**
     * The unique identifier of the staking provider
     * @type {StakingProvider}
     * @memberof StakingApiApproveTermsOfServiceByProviderId
     */
    readonly providerId: StakingProvider;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof StakingApiApproveTermsOfServiceByProviderId
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for claimRewards operation in StakingApi.
 * @export
 * @interface StakingApiClaimRewardsRequest
 */
export interface StakingApiClaimRewardsRequest {
    /**
     *
     * @type {ClaimRewardsRequest}
     * @memberof StakingApiClaimRewards
     */
    readonly claimRewardsRequest: ClaimRewardsRequest;
    /**
     * The protocol identifier (e.g. \&quot;MATIC\&quot;/\&quot;SOL\&quot;) to use
     * @type {'MATIC' | 'SOL' | 'SOL_TEST'}
     * @memberof StakingApiClaimRewards
     */
    readonly chainDescriptor: ClaimRewardsChainDescriptorEnum;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof StakingApiClaimRewards
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for getAllDelegations operation in StakingApi.
 * @export
 * @interface StakingApiGetAllDelegationsRequest
 */
export interface StakingApiGetAllDelegationsRequest {
    /**
     * Use \&quot;ETH\&quot; / \&quot;SOL\&quot; / \&quot;MATIC\&quot; / \&quot;STETH_ETH\&quot; in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument.
     * @type {ChainDescriptor}
     * @memberof StakingApiGetAllDelegations
     */
    readonly chainDescriptor?: ChainDescriptor;
}
/**
 * Request parameters for getChainInfo operation in StakingApi.
 * @export
 * @interface StakingApiGetChainInfoRequest
 */
export interface StakingApiGetChainInfoRequest {
    /**
     * The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;/\&quot;STETH_ETH\&quot;) to use
     * @type {ChainDescriptor}
     * @memberof StakingApiGetChainInfo
     */
    readonly chainDescriptor: ChainDescriptor;
}
/**
 * Request parameters for getDelegationById operation in StakingApi.
 * @export
 * @interface StakingApiGetDelegationByIdRequest
 */
export interface StakingApiGetDelegationByIdRequest {
    /**
     * The unique identifier of the staking position
     * @type {string}
     * @memberof StakingApiGetDelegationById
     */
    readonly id: string;
}
/**
 * Request parameters for split operation in StakingApi.
 * @export
 * @interface StakingApiSplitRequest
 */
export interface StakingApiSplitRequest {
    /**
     *
     * @type {SplitRequest}
     * @memberof StakingApiSplit
     */
    readonly splitRequest: SplitRequest;
    /**
     * The protocol identifier (e.g. \&quot;SOL\&quot;/\&quot;SOL_TEST\&quot;) to use
     * @type {'SOL' | 'SOL_TEST'}
     * @memberof StakingApiSplit
     */
    readonly chainDescriptor: SplitChainDescriptorEnum;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof StakingApiSplit
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for stake operation in StakingApi.
 * @export
 * @interface StakingApiStakeRequest
 */
export interface StakingApiStakeRequest {
    /**
     *
     * @type {StakeRequest}
     * @memberof StakingApiStake
     */
    readonly stakeRequest: StakeRequest;
    /**
     * The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use
     * @type {ChainDescriptor}
     * @memberof StakingApiStake
     */
    readonly chainDescriptor: ChainDescriptor;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof StakingApiStake
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for unstake operation in StakingApi.
 * @export
 * @interface StakingApiUnstakeRequest
 */
export interface StakingApiUnstakeRequest {
    /**
     *
     * @type {UnstakeRequest}
     * @memberof StakingApiUnstake
     */
    readonly unstakeRequest: UnstakeRequest;
    /**
     * The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use
     * @type {ChainDescriptor}
     * @memberof StakingApiUnstake
     */
    readonly chainDescriptor: ChainDescriptor;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof StakingApiUnstake
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for withdraw operation in StakingApi.
 * @export
 * @interface StakingApiWithdrawRequest
 */
export interface StakingApiWithdrawRequest {
    /**
     *
     * @type {WithdrawRequest}
     * @memberof StakingApiWithdraw
     */
    readonly withdrawRequest: WithdrawRequest;
    /**
     * The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use
     * @type {ChainDescriptor}
     * @memberof StakingApiWithdraw
     */
    readonly chainDescriptor: ChainDescriptor;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof StakingApiWithdraw
     */
    readonly idempotencyKey?: string;
}
/**
 * StakingApi - object-oriented interface
 * @export
 * @class StakingApi
 * @extends {BaseAPI}
 */
export declare class StakingApi extends BaseAPI {
    /**
     * Approve the terms of service of the staking provider. This must be called before performing a staking action for the first time with this provider.
     * @summary Approve staking terms of service
     * @param {StakingApiApproveTermsOfServiceByProviderIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    approveTermsOfServiceByProviderId(requestParameters: StakingApiApproveTermsOfServiceByProviderIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Perform a chain-specific Claim Rewards.
     * @summary Execute a Claim Rewards operation
     * @param {StakingApiClaimRewardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    claimRewards(requestParameters: StakingApiClaimRewardsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Return detailed information on all staking positions, including the staked amount, rewards, status and more.
     * @summary List staking positions details
     * @param {StakingApiGetAllDelegationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    getAllDelegations(requestParameters?: StakingApiGetAllDelegationsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<StakingGetAllDelegationsResponse>>;
    /**
     * Return chain-specific, staking-related information summary (e.g. epoch details, lockup durations, estimated rewards, etc.)
     * @summary Get chain-specific staking summary
     * @param {StakingApiGetChainInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    getChainInfo(requestParameters: StakingApiGetChainInfoRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ChainInfoResponse>>;
    /**
     * Return an alphabetical list of supported chains.
     * @summary List staking supported chains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    getChains(): Promise<import("../response/fireblocksResponse").FireblocksResponse<StakingGetChainsResponse>>;
    /**
     * Return detailed information on a staking position, including the staked amount, rewards, status and more.
     * @summary Get staking position details
     * @param {StakingApiGetDelegationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    getDelegationById(requestParameters: StakingApiGetDelegationByIdRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<Delegation>>;
    /**
     * Return information on all the available staking providers.
     * @summary List staking providers details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    getProviders(): Promise<import("../response/fireblocksResponse").FireblocksResponse<StakingGetProvidersResponse>>;
    /**
     * Return a summary of all vaults, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary Get staking summary details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    getSummary(): Promise<import("../response/fireblocksResponse").FireblocksResponse<DelegationSummary>>;
    /**
     * Return a summary for each vault, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
     * @summary Get staking summary details by vault
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    getSummaryByVault(): Promise<import("../response/fireblocksResponse").FireblocksResponse<StakingGetSummaryByVaultResponse>>;
    /**
     * Perform a Solana Split stake account.
     * @summary Execute a Split operation on SOL/SOL_TEST stake account
     * @param {StakingApiSplitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    split(requestParameters: StakingApiSplitRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<SplitResponse>>;
    /**
     * Perform a chain-specific Stake.
     * @summary Initiate Stake Operation
     * @param {StakingApiStakeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stake(requestParameters: StakingApiStakeRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<StakeResponse>>;
    /**
     * Execute an Unstake operation
     * @summary Execute an Unstake operation
     * @param {StakingApiUnstakeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    unstake(requestParameters: StakingApiUnstakeRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
    /**
     * Perform a chain-specific Withdraw.
     * @summary Execute a Withdraw operation
     * @param {StakingApiWithdrawRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    withdraw(requestParameters: StakingApiWithdrawRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
}
/**
 * @export
 */
export declare const ClaimRewardsChainDescriptorEnum: {
    readonly Matic: "MATIC";
    readonly Sol: "SOL";
    readonly SolTest: "SOL_TEST";
};
export type ClaimRewardsChainDescriptorEnum = typeof ClaimRewardsChainDescriptorEnum[keyof typeof ClaimRewardsChainDescriptorEnum];
/**
 * @export
 */
export declare const SplitChainDescriptorEnum: {
    readonly Sol: "SOL";
    readonly SolTest: "SOL_TEST";
};
export type SplitChainDescriptorEnum = typeof SplitChainDescriptorEnum[keyof typeof SplitChainDescriptorEnum];
