/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { TravelRuleGetAllVASPsResponse } from '../models';
import { TravelRuleUpdateVASPDetails } from '../models';
import { TravelRuleVASP } from '../models';
import { TravelRuleValidateFullTransactionRequest } from '../models';
import { TravelRuleValidateTransactionResponse } from '../models';
import { TravelRuleVaspForVault } from '../models';
/**
 * TravelRuleApi - axios parameter creator
 * @export
 */
export declare const TravelRuleApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get VASP Details.  Returns information about a VASP that has the specified DID.
     * @summary Get VASP details
     * @param {string} did
     * @param {Array<GetVASPByDIDFieldsEnum>} [fields] A CSV of fields to return. Choose from the following options:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVASPByDID: (did: string, fields?: Array<GetVASPByDIDFieldsEnum>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted.
     * @summary Get All VASPs
     * @param {GetVASPsOrderEnum} [order] Field to order by
     * @param {number} [pageSize] Records per page
     * @param {Array<GetVASPsFieldsEnum>} [fields] CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
     * @param {string} [search] Search query
     * @param {GetVASPsReviewValueEnum} [reviewValue] Filter by the VASP\&#39;s review status. Possible values include: \&quot;TRUSTED\&quot;, \&quot;BLOCKED\&quot;, \&quot;MANUAL\&quot;, or \&quot;NULL\&quot;. When provided, only VASPs that match the specified reviewValue will be returned (i.e., VASPs that have already been reviewed to this status).
     * @param {string} [pageCursor] Cursor for pagination. When provided, the response will include the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVASPs: (order?: GetVASPsOrderEnum, pageSize?: number, fields?: Array<GetVASPsFieldsEnum>, search?: string, reviewValue?: GetVASPsReviewValueEnum, pageCursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get assigned VASP Did for a specific vault. Returns empty string vaspDid value in response if none assigned.
     * @summary Get assigned VASP to vault
     * @param {string} vaultAccountId The ID of the vault account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaspForVault: (vaultAccountId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sets the VASP Did for a specific vault. Pass empty string to remove existing one.
     * @summary Assign VASP to vault
     * @param {TravelRuleVaspForVault} travelRuleVaspForVault
     * @param {string} vaultAccountId The ID of the vault account
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVaspForVault: (travelRuleVaspForVault: TravelRuleVaspForVault, vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.
     * @summary Add jsonDidKey to VASP details
     * @param {TravelRuleUpdateVASPDetails} travelRuleUpdateVASPDetails
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVasp: (travelRuleUpdateVASPDetails: TravelRuleUpdateVASPDetails, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.
     * @summary Validate Full Travel Rule Transaction
     * @param {TravelRuleValidateFullTransactionRequest} travelRuleValidateFullTransactionRequest
     * @param {Array<ValidateFullTravelRuleTransactionNotationEnum>} [notation] Specifies the notation of the transaction. Possible values are: - &#x60;notabene&#x60;: Uses Notabene notation (default behavior). - &#x60;fireblocks&#x60;: Uses Fireblocks notation, with automatic translation of asset tickers and amounts. - &#x60;&lt;none&gt;&#x60;: Defaults to &#x60;notabene&#x60; for backward compatibility. **Note:** The default value for the &#x60;notation&#x60; parameter will change from &#x60;notabene&#x60; to &#x60;fireblocks&#x60; Update your integrations accordingly.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFullTravelRuleTransaction: (travelRuleValidateFullTransactionRequest: TravelRuleValidateFullTransactionRequest, notation?: Array<ValidateFullTravelRuleTransactionNotationEnum>, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TravelRuleApi - functional programming interface
 * @export
 */
export declare const TravelRuleApiFp: (configuration?: Configuration) => {
    /**
     * Get VASP Details.  Returns information about a VASP that has the specified DID.
     * @summary Get VASP details
     * @param {string} did
     * @param {Array<GetVASPByDIDFieldsEnum>} [fields] A CSV of fields to return. Choose from the following options:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVASPByDID(did: string, fields?: Array<GetVASPByDIDFieldsEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelRuleVASP>>;
    /**
     * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted.
     * @summary Get All VASPs
     * @param {GetVASPsOrderEnum} [order] Field to order by
     * @param {number} [pageSize] Records per page
     * @param {Array<GetVASPsFieldsEnum>} [fields] CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
     * @param {string} [search] Search query
     * @param {GetVASPsReviewValueEnum} [reviewValue] Filter by the VASP\&#39;s review status. Possible values include: \&quot;TRUSTED\&quot;, \&quot;BLOCKED\&quot;, \&quot;MANUAL\&quot;, or \&quot;NULL\&quot;. When provided, only VASPs that match the specified reviewValue will be returned (i.e., VASPs that have already been reviewed to this status).
     * @param {string} [pageCursor] Cursor for pagination. When provided, the response will include the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVASPs(order?: GetVASPsOrderEnum, pageSize?: number, fields?: Array<GetVASPsFieldsEnum>, search?: string, reviewValue?: GetVASPsReviewValueEnum, pageCursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelRuleGetAllVASPsResponse>>;
    /**
     * Get assigned VASP Did for a specific vault. Returns empty string vaspDid value in response if none assigned.
     * @summary Get assigned VASP to vault
     * @param {string} vaultAccountId The ID of the vault account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaspForVault(vaultAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelRuleVaspForVault>>;
    /**
     * Sets the VASP Did for a specific vault. Pass empty string to remove existing one.
     * @summary Assign VASP to vault
     * @param {TravelRuleVaspForVault} travelRuleVaspForVault
     * @param {string} vaultAccountId The ID of the vault account
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVaspForVault(travelRuleVaspForVault: TravelRuleVaspForVault, vaultAccountId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelRuleVaspForVault>>;
    /**
     * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.
     * @summary Add jsonDidKey to VASP details
     * @param {TravelRuleUpdateVASPDetails} travelRuleUpdateVASPDetails
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVasp(travelRuleUpdateVASPDetails: TravelRuleUpdateVASPDetails, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelRuleUpdateVASPDetails>>;
    /**
     * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.
     * @summary Validate Full Travel Rule Transaction
     * @param {TravelRuleValidateFullTransactionRequest} travelRuleValidateFullTransactionRequest
     * @param {Array<ValidateFullTravelRuleTransactionNotationEnum>} [notation] Specifies the notation of the transaction. Possible values are: - &#x60;notabene&#x60;: Uses Notabene notation (default behavior). - &#x60;fireblocks&#x60;: Uses Fireblocks notation, with automatic translation of asset tickers and amounts. - &#x60;&lt;none&gt;&#x60;: Defaults to &#x60;notabene&#x60; for backward compatibility. **Note:** The default value for the &#x60;notation&#x60; parameter will change from &#x60;notabene&#x60; to &#x60;fireblocks&#x60; Update your integrations accordingly.
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFullTravelRuleTransaction(travelRuleValidateFullTransactionRequest: TravelRuleValidateFullTransactionRequest, notation?: Array<ValidateFullTravelRuleTransactionNotationEnum>, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelRuleValidateTransactionResponse>>;
};
/**
 * TravelRuleApi - factory interface
 * @export
 */
export declare const TravelRuleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get VASP Details.  Returns information about a VASP that has the specified DID.
     * @summary Get VASP details
     * @param {TravelRuleApiGetVASPByDIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVASPByDID(requestParameters: TravelRuleApiGetVASPByDIDRequest, options?: RawAxiosRequestConfig): AxiosPromise<TravelRuleVASP>;
    /**
     * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted.
     * @summary Get All VASPs
     * @param {TravelRuleApiGetVASPsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVASPs(requestParameters?: TravelRuleApiGetVASPsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TravelRuleGetAllVASPsResponse>;
    /**
     * Get assigned VASP Did for a specific vault. Returns empty string vaspDid value in response if none assigned.
     * @summary Get assigned VASP to vault
     * @param {TravelRuleApiGetVaspForVaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaspForVault(requestParameters: TravelRuleApiGetVaspForVaultRequest, options?: RawAxiosRequestConfig): AxiosPromise<TravelRuleVaspForVault>;
    /**
     * Sets the VASP Did for a specific vault. Pass empty string to remove existing one.
     * @summary Assign VASP to vault
     * @param {TravelRuleApiSetVaspForVaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVaspForVault(requestParameters: TravelRuleApiSetVaspForVaultRequest, options?: RawAxiosRequestConfig): AxiosPromise<TravelRuleVaspForVault>;
    /**
     * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.
     * @summary Add jsonDidKey to VASP details
     * @param {TravelRuleApiUpdateVaspRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVasp(requestParameters: TravelRuleApiUpdateVaspRequest, options?: RawAxiosRequestConfig): AxiosPromise<TravelRuleUpdateVASPDetails>;
    /**
     * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.
     * @summary Validate Full Travel Rule Transaction
     * @param {TravelRuleApiValidateFullTravelRuleTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFullTravelRuleTransaction(requestParameters: TravelRuleApiValidateFullTravelRuleTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<TravelRuleValidateTransactionResponse>;
};
/**
 * Request parameters for getVASPByDID operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiGetVASPByDIDRequest
 */
export interface TravelRuleApiGetVASPByDIDRequest {
    /**
     *
     * @type {string}
     * @memberof TravelRuleApiGetVASPByDID
     */
    readonly did: string;
    /**
     * A CSV of fields to return. Choose from the following options:
     * @type {TravelRuleFieldsEnum}
     * @memberof TravelRuleApiGetVASPByDID
     */
    readonly fields?: Array<GetVASPByDIDFieldsEnum>;
}
/**
 * Request parameters for getVASPs operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiGetVASPsRequest
 */
export interface TravelRuleApiGetVASPsRequest {
    /**
     * Field to order by
     * @type {'ASC' | 'DESC'}
     * @memberof TravelRuleApiGetVASPs
     */
    readonly order?: GetVASPsOrderEnum;
    /**
     * Records per page
     * @type {number}
     * @memberof TravelRuleApiGetVASPs
     */
    readonly pageSize?: number;
    /**
     * CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
     * @type {TravelRuleFieldsEnum}
     * @memberof TravelRuleApiGetVASPs
     */
    readonly fields?: Array<GetVASPsFieldsEnum>;
    /**
     * Search query
     * @type {string}
     * @memberof TravelRuleApiGetVASPs
     */
    readonly search?: string;
    /**
     * Filter by the VASP\&#39;s review status. Possible values include: \&quot;TRUSTED\&quot;, \&quot;BLOCKED\&quot;, \&quot;MANUAL\&quot;, or \&quot;NULL\&quot;. When provided, only VASPs that match the specified reviewValue will be returned (i.e., VASPs that have already been reviewed to this status).
     * @type {'TRUSTED' | 'BLOCKED' | 'MANUAL' | 'null'}
     * @memberof TravelRuleApiGetVASPs
     */
    readonly reviewValue?: GetVASPsReviewValueEnum;
    /**
     * Cursor for pagination. When provided, the response will include the next page of results.
     * @type {string}
     * @memberof TravelRuleApiGetVASPs
     */
    readonly pageCursor?: string;
}
/**
 * Request parameters for getVaspForVault operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiGetVaspForVaultRequest
 */
export interface TravelRuleApiGetVaspForVaultRequest {
    /**
     * The ID of the vault account
     * @type {string}
     * @memberof TravelRuleApiGetVaspForVault
     */
    readonly vaultAccountId: string;
}
/**
 * Request parameters for setVaspForVault operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiSetVaspForVaultRequest
 */
export interface TravelRuleApiSetVaspForVaultRequest {
    /**
     *
     * @type {TravelRuleVaspForVault}
     * @memberof TravelRuleApiSetVaspForVault
     */
    readonly travelRuleVaspForVault: TravelRuleVaspForVault;
    /**
     * The ID of the vault account
     * @type {string}
     * @memberof TravelRuleApiSetVaspForVault
     */
    readonly vaultAccountId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TravelRuleApiSetVaspForVault
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for updateVasp operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiUpdateVaspRequest
 */
export interface TravelRuleApiUpdateVaspRequest {
    /**
     *
     * @type {TravelRuleUpdateVASPDetails}
     * @memberof TravelRuleApiUpdateVasp
     */
    readonly travelRuleUpdateVASPDetails: TravelRuleUpdateVASPDetails;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TravelRuleApiUpdateVasp
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for validateFullTravelRuleTransaction operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiValidateFullTravelRuleTransactionRequest
 */
export interface TravelRuleApiValidateFullTravelRuleTransactionRequest {
    /**
     *
     * @type {TravelRuleValidateFullTransactionRequest}
     * @memberof TravelRuleApiValidateFullTravelRuleTransaction
     */
    readonly travelRuleValidateFullTransactionRequest: TravelRuleValidateFullTransactionRequest;
    /**
     * Specifies the notation of the transaction. Possible values are: - &#x60;notabene&#x60;: Uses Notabene notation (default behavior). - &#x60;fireblocks&#x60;: Uses Fireblocks notation, with automatic translation of asset tickers and amounts. - &#x60;&lt;none&gt;&#x60;: Defaults to &#x60;notabene&#x60; for backward compatibility. **Note:** The default value for the &#x60;notation&#x60; parameter will change from &#x60;notabene&#x60; to &#x60;fireblocks&#x60; Update your integrations accordingly.
     * @type {TravelRuleNotationEnum}
     * @memberof TravelRuleApiValidateFullTravelRuleTransaction
     */
    readonly notation?: Array<ValidateFullTravelRuleTransactionNotationEnum>;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TravelRuleApiValidateFullTravelRuleTransaction
     */
    readonly idempotencyKey?: string;
}
/**
 * TravelRuleApi - object-oriented interface
 * @export
 * @class TravelRuleApi
 * @extends {BaseAPI}
 */
export declare class TravelRuleApi extends BaseAPI {
    /**
     * Get VASP Details.  Returns information about a VASP that has the specified DID.
     * @summary Get VASP details
     * @param {TravelRuleApiGetVASPByDIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    getVASPByDID(requestParameters: TravelRuleApiGetVASPByDIDRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TravelRuleVASP>>;
    /**
     * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted.
     * @summary Get All VASPs
     * @param {TravelRuleApiGetVASPsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    getVASPs(requestParameters?: TravelRuleApiGetVASPsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TravelRuleGetAllVASPsResponse>>;
    /**
     * Get assigned VASP Did for a specific vault. Returns empty string vaspDid value in response if none assigned.
     * @summary Get assigned VASP to vault
     * @param {TravelRuleApiGetVaspForVaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    getVaspForVault(requestParameters: TravelRuleApiGetVaspForVaultRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TravelRuleVaspForVault>>;
    /**
     * Sets the VASP Did for a specific vault. Pass empty string to remove existing one.
     * @summary Assign VASP to vault
     * @param {TravelRuleApiSetVaspForVaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    setVaspForVault(requestParameters: TravelRuleApiSetVaspForVaultRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TravelRuleVaspForVault>>;
    /**
     * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.
     * @summary Add jsonDidKey to VASP details
     * @param {TravelRuleApiUpdateVaspRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    updateVasp(requestParameters: TravelRuleApiUpdateVaspRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TravelRuleUpdateVASPDetails>>;
    /**
     * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.
     * @summary Validate Full Travel Rule Transaction
     * @param {TravelRuleApiValidateFullTravelRuleTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    validateFullTravelRuleTransaction(requestParameters: TravelRuleApiValidateFullTravelRuleTransactionRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TravelRuleValidateTransactionResponse>>;
}
/**
 * @export
 */
export declare const GetVASPByDIDFieldsEnum: {
    readonly Did: "did";
    readonly Name: "name";
    readonly VerificationStatus: "verificationStatus";
    readonly AddressLine1: "addressLine1";
    readonly AddressLine2: "addressLine2";
    readonly City: "city";
    readonly Country: "country";
    readonly EmailDomains: "emailDomains";
    readonly Website: "website";
    readonly Logo: "logo";
    readonly LegalStructure: "legalStructure";
    readonly LegalName: "legalName";
    readonly YearFounded: "yearFounded";
    readonly IncorporationCountry: "incorporationCountry";
    readonly IsRegulated: "isRegulated";
    readonly OtherNames: "otherNames";
    readonly IdentificationType: "identificationType";
    readonly IdentificationCountry: "identificationCountry";
    readonly BusinessNumber: "businessNumber";
    readonly RegulatoryAuthorities: "regulatoryAuthorities";
    readonly Jurisdictions: "jurisdictions";
    readonly Street: "street";
    readonly Number: "number";
    readonly Unit: "unit";
    readonly PostCode: "postCode";
    readonly State: "state";
    readonly Certificates: "certificates";
    readonly Description: "description";
    readonly TravelRuleOpenvasp: "travelRule_OPENVASP";
    readonly TravelRuleSygna: "travelRule_SYGNA";
    readonly TravelRuleTrisa: "travelRule_TRISA";
    readonly TravelRuleTrlight: "travelRule_TRLIGHT";
    readonly TravelRuleEmail: "travelRule_EMAIL";
    readonly TravelRuleTrp: "travelRule_TRP";
    readonly TravelRuleShyft: "travelRule_SHYFT";
    readonly TravelRuleUstravelrulewg: "travelRule_USTRAVELRULEWG";
    readonly CreatedAt: "createdAt";
    readonly CreatedBy: "createdBy";
    readonly UpdatedAt: "updatedAt";
    readonly UpdatedBy: "updatedBy";
    readonly LastSentDate: "lastSentDate";
    readonly LastReceivedDate: "lastReceivedDate";
    readonly Documents: "documents";
    readonly HasAdmin: "hasAdmin";
    readonly IsNotifiable: "isNotifiable";
    readonly Issuers: "issuers";
};
export type GetVASPByDIDFieldsEnum = typeof GetVASPByDIDFieldsEnum[keyof typeof GetVASPByDIDFieldsEnum];
/**
 * @export
 */
export declare const GetVASPsOrderEnum: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type GetVASPsOrderEnum = typeof GetVASPsOrderEnum[keyof typeof GetVASPsOrderEnum];
/**
 * @export
 */
export declare const GetVASPsFieldsEnum: {
    readonly Did: "did";
    readonly Name: "name";
    readonly VerificationStatus: "verificationStatus";
    readonly AddressLine1: "addressLine1";
    readonly AddressLine2: "addressLine2";
    readonly City: "city";
    readonly Country: "country";
    readonly EmailDomains: "emailDomains";
    readonly Website: "website";
    readonly Logo: "logo";
    readonly LegalStructure: "legalStructure";
    readonly LegalName: "legalName";
    readonly YearFounded: "yearFounded";
    readonly IncorporationCountry: "incorporationCountry";
    readonly IsRegulated: "isRegulated";
    readonly OtherNames: "otherNames";
    readonly IdentificationType: "identificationType";
    readonly IdentificationCountry: "identificationCountry";
    readonly BusinessNumber: "businessNumber";
    readonly RegulatoryAuthorities: "regulatoryAuthorities";
    readonly Jurisdictions: "jurisdictions";
    readonly Street: "street";
    readonly Number: "number";
    readonly Unit: "unit";
    readonly PostCode: "postCode";
    readonly State: "state";
    readonly Certificates: "certificates";
    readonly Description: "description";
    readonly TravelRuleOpenvasp: "travelRule_OPENVASP";
    readonly TravelRuleSygna: "travelRule_SYGNA";
    readonly TravelRuleTrisa: "travelRule_TRISA";
    readonly TravelRuleTrlight: "travelRule_TRLIGHT";
    readonly TravelRuleEmail: "travelRule_EMAIL";
    readonly TravelRuleTrp: "travelRule_TRP";
    readonly TravelRuleShyft: "travelRule_SHYFT";
    readonly TravelRuleUstravelrulewg: "travelRule_USTRAVELRULEWG";
    readonly CreatedAt: "createdAt";
    readonly CreatedBy: "createdBy";
    readonly UpdatedAt: "updatedAt";
    readonly UpdatedBy: "updatedBy";
    readonly LastSentDate: "lastSentDate";
    readonly LastReceivedDate: "lastReceivedDate";
    readonly Documents: "documents";
    readonly HasAdmin: "hasAdmin";
    readonly IsNotifiable: "isNotifiable";
    readonly Issuers: "issuers";
};
export type GetVASPsFieldsEnum = typeof GetVASPsFieldsEnum[keyof typeof GetVASPsFieldsEnum];
/**
 * @export
 */
export declare const GetVASPsReviewValueEnum: {
    readonly Trusted: "TRUSTED";
    readonly Blocked: "BLOCKED";
    readonly Manual: "MANUAL";
    readonly Null: "null";
};
export type GetVASPsReviewValueEnum = typeof GetVASPsReviewValueEnum[keyof typeof GetVASPsReviewValueEnum];
/**
 * @export
 */
export declare const ValidateFullTravelRuleTransactionNotationEnum: {
    readonly Fireblocks: "fireblocks";
    readonly Notabene: "notabene";
};
export type ValidateFullTravelRuleTransactionNotationEnum = typeof ValidateFullTravelRuleTransactionNotationEnum[keyof typeof ValidateFullTravelRuleTransactionNotationEnum];
