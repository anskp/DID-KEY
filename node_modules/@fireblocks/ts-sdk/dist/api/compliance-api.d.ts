/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { ComplianceResultFullPayload } from '../models';
import { CreateTransactionResponse } from '../models';
import { ScreeningConfigurationsRequest } from '../models';
import { ScreeningPolicyResponse } from '../models';
import { ScreeningProviderRulesConfigurationResponse } from '../models';
import { ScreeningUpdateConfigurations } from '../models';
/**
 * ComplianceApi - axios parameter creator
 * @export
 */
export declare const ComplianceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get the post-screening policy for AML.
     * @summary AML - View Post-Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAmlPostScreeningPolicy: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the screening policy for AML.
     * @summary AML - View Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAmlScreeningPolicy: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the post-screening policy for Travel Rule.
     * @summary Travel Rule - View Post-Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostScreeningPolicy: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Provides all the compliance details for the given screened transaction.
     * @summary Provides all the compliance details for the given screened transaction.
     * @param {string} txId Fireblocks transaction ID of the screened transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreeningFullDetails: (txId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the screening policy for Travel Rule.
     * @summary Travel Rule - View Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreeningPolicy: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is restricted to Admin API users and is only applicable to outgoing transactions.
     * @summary Calling the \"Bypass Screening Policy\" API endpoint triggers a new transaction, with the API user as the initiator, bypassing the screening policy check
     * @param {string} txId The transaction id that was rejected by screening checks
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retryRejectedTransactionBypassScreeningChecks: (txId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates bypass screening, inbound delay, or outbound delay configurations for AML.
     * @summary Update AML Configuration
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAmlScreeningConfiguration: (idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update tenant screening configuration.
     * @summary Tenant - Screening Configuration
     * @param {ScreeningUpdateConfigurations} screeningUpdateConfigurations
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreeningConfiguration: (screeningUpdateConfigurations: ScreeningUpdateConfigurations, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates bypass screening, inbound delay, or outbound delay configurations for Travel Rule.
     * @summary Update Travel Rule Configuration
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTravelRuleConfig: (idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ComplianceApi - functional programming interface
 * @export
 */
export declare const ComplianceApiFp: (configuration?: Configuration) => {
    /**
     * Get the post-screening policy for AML.
     * @summary AML - View Post-Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAmlPostScreeningPolicy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningPolicyResponse>>;
    /**
     * Get the screening policy for AML.
     * @summary AML - View Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAmlScreeningPolicy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningProviderRulesConfigurationResponse>>;
    /**
     * Get the post-screening policy for Travel Rule.
     * @summary Travel Rule - View Post-Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostScreeningPolicy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningPolicyResponse>>;
    /**
     * Provides all the compliance details for the given screened transaction.
     * @summary Provides all the compliance details for the given screened transaction.
     * @param {string} txId Fireblocks transaction ID of the screened transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreeningFullDetails(txId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComplianceResultFullPayload>>;
    /**
     * Get the screening policy for Travel Rule.
     * @summary Travel Rule - View Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreeningPolicy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningProviderRulesConfigurationResponse>>;
    /**
     * This endpoint is restricted to Admin API users and is only applicable to outgoing transactions.
     * @summary Calling the \"Bypass Screening Policy\" API endpoint triggers a new transaction, with the API user as the initiator, bypassing the screening policy check
     * @param {string} txId The transaction id that was rejected by screening checks
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retryRejectedTransactionBypassScreeningChecks(txId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransactionResponse>>;
    /**
     * Updates bypass screening, inbound delay, or outbound delay configurations for AML.
     * @summary Update AML Configuration
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAmlScreeningConfiguration(idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningConfigurationsRequest>>;
    /**
     * Update tenant screening configuration.
     * @summary Tenant - Screening Configuration
     * @param {ScreeningUpdateConfigurations} screeningUpdateConfigurations
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreeningConfiguration(screeningUpdateConfigurations: ScreeningUpdateConfigurations, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningUpdateConfigurations>>;
    /**
     * Updates bypass screening, inbound delay, or outbound delay configurations for Travel Rule.
     * @summary Update Travel Rule Configuration
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTravelRuleConfig(idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningConfigurationsRequest>>;
};
/**
 * ComplianceApi - factory interface
 * @export
 */
export declare const ComplianceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get the post-screening policy for AML.
     * @summary AML - View Post-Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAmlPostScreeningPolicy(options?: RawAxiosRequestConfig): AxiosPromise<ScreeningPolicyResponse>;
    /**
     * Get the screening policy for AML.
     * @summary AML - View Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAmlScreeningPolicy(options?: RawAxiosRequestConfig): AxiosPromise<ScreeningProviderRulesConfigurationResponse>;
    /**
     * Get the post-screening policy for Travel Rule.
     * @summary Travel Rule - View Post-Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostScreeningPolicy(options?: RawAxiosRequestConfig): AxiosPromise<ScreeningPolicyResponse>;
    /**
     * Provides all the compliance details for the given screened transaction.
     * @summary Provides all the compliance details for the given screened transaction.
     * @param {ComplianceApiGetScreeningFullDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreeningFullDetails(requestParameters: ComplianceApiGetScreeningFullDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ComplianceResultFullPayload>;
    /**
     * Get the screening policy for Travel Rule.
     * @summary Travel Rule - View Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreeningPolicy(options?: RawAxiosRequestConfig): AxiosPromise<ScreeningProviderRulesConfigurationResponse>;
    /**
     * This endpoint is restricted to Admin API users and is only applicable to outgoing transactions.
     * @summary Calling the \"Bypass Screening Policy\" API endpoint triggers a new transaction, with the API user as the initiator, bypassing the screening policy check
     * @param {ComplianceApiRetryRejectedTransactionBypassScreeningChecksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retryRejectedTransactionBypassScreeningChecks(requestParameters: ComplianceApiRetryRejectedTransactionBypassScreeningChecksRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateTransactionResponse>;
    /**
     * Updates bypass screening, inbound delay, or outbound delay configurations for AML.
     * @summary Update AML Configuration
     * @param {ComplianceApiUpdateAmlScreeningConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAmlScreeningConfiguration(requestParameters?: ComplianceApiUpdateAmlScreeningConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ScreeningConfigurationsRequest>;
    /**
     * Update tenant screening configuration.
     * @summary Tenant - Screening Configuration
     * @param {ComplianceApiUpdateScreeningConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreeningConfiguration(requestParameters: ComplianceApiUpdateScreeningConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ScreeningUpdateConfigurations>;
    /**
     * Updates bypass screening, inbound delay, or outbound delay configurations for Travel Rule.
     * @summary Update Travel Rule Configuration
     * @param {ComplianceApiUpdateTravelRuleConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTravelRuleConfig(requestParameters?: ComplianceApiUpdateTravelRuleConfigRequest, options?: RawAxiosRequestConfig): AxiosPromise<ScreeningConfigurationsRequest>;
};
/**
 * Request parameters for getScreeningFullDetails operation in ComplianceApi.
 * @export
 * @interface ComplianceApiGetScreeningFullDetailsRequest
 */
export interface ComplianceApiGetScreeningFullDetailsRequest {
    /**
     * Fireblocks transaction ID of the screened transaction
     * @type {string}
     * @memberof ComplianceApiGetScreeningFullDetails
     */
    readonly txId: string;
}
/**
 * Request parameters for retryRejectedTransactionBypassScreeningChecks operation in ComplianceApi.
 * @export
 * @interface ComplianceApiRetryRejectedTransactionBypassScreeningChecksRequest
 */
export interface ComplianceApiRetryRejectedTransactionBypassScreeningChecksRequest {
    /**
     * The transaction id that was rejected by screening checks
     * @type {string}
     * @memberof ComplianceApiRetryRejectedTransactionBypassScreeningChecks
     */
    readonly txId: string;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ComplianceApiRetryRejectedTransactionBypassScreeningChecks
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for updateAmlScreeningConfiguration operation in ComplianceApi.
 * @export
 * @interface ComplianceApiUpdateAmlScreeningConfigurationRequest
 */
export interface ComplianceApiUpdateAmlScreeningConfigurationRequest {
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ComplianceApiUpdateAmlScreeningConfiguration
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for updateScreeningConfiguration operation in ComplianceApi.
 * @export
 * @interface ComplianceApiUpdateScreeningConfigurationRequest
 */
export interface ComplianceApiUpdateScreeningConfigurationRequest {
    /**
     *
     * @type {ScreeningUpdateConfigurations}
     * @memberof ComplianceApiUpdateScreeningConfiguration
     */
    readonly screeningUpdateConfigurations: ScreeningUpdateConfigurations;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ComplianceApiUpdateScreeningConfiguration
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for updateTravelRuleConfig operation in ComplianceApi.
 * @export
 * @interface ComplianceApiUpdateTravelRuleConfigRequest
 */
export interface ComplianceApiUpdateTravelRuleConfigRequest {
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ComplianceApiUpdateTravelRuleConfig
     */
    readonly idempotencyKey?: string;
}
/**
 * ComplianceApi - object-oriented interface
 * @export
 * @class ComplianceApi
 * @extends {BaseAPI}
 */
export declare class ComplianceApi extends BaseAPI {
    /**
     * Get the post-screening policy for AML.
     * @summary AML - View Post-Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    getAmlPostScreeningPolicy(): Promise<import("../response/fireblocksResponse").FireblocksResponse<ScreeningPolicyResponse>>;
    /**
     * Get the screening policy for AML.
     * @summary AML - View Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    getAmlScreeningPolicy(): Promise<import("../response/fireblocksResponse").FireblocksResponse<ScreeningProviderRulesConfigurationResponse>>;
    /**
     * Get the post-screening policy for Travel Rule.
     * @summary Travel Rule - View Post-Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    getPostScreeningPolicy(): Promise<import("../response/fireblocksResponse").FireblocksResponse<ScreeningPolicyResponse>>;
    /**
     * Provides all the compliance details for the given screened transaction.
     * @summary Provides all the compliance details for the given screened transaction.
     * @param {ComplianceApiGetScreeningFullDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    getScreeningFullDetails(requestParameters: ComplianceApiGetScreeningFullDetailsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ComplianceResultFullPayload>>;
    /**
     * Get the screening policy for Travel Rule.
     * @summary Travel Rule - View Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    getScreeningPolicy(): Promise<import("../response/fireblocksResponse").FireblocksResponse<ScreeningProviderRulesConfigurationResponse>>;
    /**
     * This endpoint is restricted to Admin API users and is only applicable to outgoing transactions.
     * @summary Calling the \"Bypass Screening Policy\" API endpoint triggers a new transaction, with the API user as the initiator, bypassing the screening policy check
     * @param {ComplianceApiRetryRejectedTransactionBypassScreeningChecksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    retryRejectedTransactionBypassScreeningChecks(requestParameters: ComplianceApiRetryRejectedTransactionBypassScreeningChecksRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<CreateTransactionResponse>>;
    /**
     * Updates bypass screening, inbound delay, or outbound delay configurations for AML.
     * @summary Update AML Configuration
     * @param {ComplianceApiUpdateAmlScreeningConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    updateAmlScreeningConfiguration(requestParameters?: ComplianceApiUpdateAmlScreeningConfigurationRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ScreeningConfigurationsRequest>>;
    /**
     * Update tenant screening configuration.
     * @summary Tenant - Screening Configuration
     * @param {ComplianceApiUpdateScreeningConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    updateScreeningConfiguration(requestParameters: ComplianceApiUpdateScreeningConfigurationRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ScreeningUpdateConfigurations>>;
    /**
     * Updates bypass screening, inbound delay, or outbound delay configurations for Travel Rule.
     * @summary Update Travel Rule Configuration
     * @param {ComplianceApiUpdateTravelRuleConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    updateTravelRuleConfig(requestParameters?: ComplianceApiUpdateTravelRuleConfigRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ScreeningConfigurationsRequest>>;
}
