/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddExchangeAccountRequest } from '../models';
import { AddExchangeAccountResponse } from '../models';
import { ConvertAssetsRequest } from '../models';
import { ConvertAssetsResponse } from '../models';
import { CreateInternalTransferRequest } from '../models';
import { ExchangeAccount } from '../models';
import { ExchangeAsset } from '../models';
import { GetExchangeAccountsCredentialsPublicKeyResponse } from '../models';
import { GetPagedExchangeAccountsResponse } from '../models';
import { InternalTransferResponse } from '../models';
/**
 * ExchangeAccountsApi - axios parameter creator
 * @export
 */
export declare const ExchangeAccountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add an exchange account to exchanges.
     * @summary Add an exchange account
     * @param {AddExchangeAccountRequest} addExchangeAccountRequest
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addExchangeAccount: (addExchangeAccountRequest: AddExchangeAccountRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
     * @summary Convert exchange account funds from the source asset to the destination asset.
     * @param {string} exchangeAccountId The ID of the exchange account. Please make sure the exchange supports conversions. To find the ID of your exchange account, use GET/exchange_accounts.
     * @param {ConvertAssetsRequest} [convertAssetsRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    convertAssets: (exchangeAccountId: string, convertAssetsRequest?: ConvertAssetsRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns an exchange account by ID.
     * @summary Find a specific exchange account
     * @param {string} exchangeAccountId The ID of the exchange account to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeAccount: (exchangeAccountId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns an asset for an exchange account.
     * @summary Find an asset for an exchange account
     * @param {string} exchangeAccountId The ID of the exchange account to return
     * @param {string} assetId The ID of the asset to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeAccountAsset: (exchangeAccountId: string, assetId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return public key
     * @summary Get public key to encrypt exchange credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeAccountsCredentialsPublicKey: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a page include exchange accounts.
     * @summary Pagination list exchange accounts
     * @param {number} limit number of exchanges per page
     * @param {string} [before]
     * @param {string} [after]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPagedExchangeAccounts: (limit: number, before?: string, after?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Transfers funds between trading accounts under the same exchange account.
     * @summary Internal transfer for exchange accounts
     * @param {string} exchangeAccountId The ID of the exchange account to return
     * @param {CreateInternalTransferRequest} [createInternalTransferRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    internalTransfer: (exchangeAccountId: string, createInternalTransferRequest?: CreateInternalTransferRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ExchangeAccountsApi - functional programming interface
 * @export
 */
export declare const ExchangeAccountsApiFp: (configuration?: Configuration) => {
    /**
     * Add an exchange account to exchanges.
     * @summary Add an exchange account
     * @param {AddExchangeAccountRequest} addExchangeAccountRequest
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addExchangeAccount(addExchangeAccountRequest: AddExchangeAccountRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddExchangeAccountResponse>>;
    /**
     * Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
     * @summary Convert exchange account funds from the source asset to the destination asset.
     * @param {string} exchangeAccountId The ID of the exchange account. Please make sure the exchange supports conversions. To find the ID of your exchange account, use GET/exchange_accounts.
     * @param {ConvertAssetsRequest} [convertAssetsRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    convertAssets(exchangeAccountId: string, convertAssetsRequest?: ConvertAssetsRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConvertAssetsResponse>>;
    /**
     * Returns an exchange account by ID.
     * @summary Find a specific exchange account
     * @param {string} exchangeAccountId The ID of the exchange account to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeAccount(exchangeAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeAccount>>;
    /**
     * Returns an asset for an exchange account.
     * @summary Find an asset for an exchange account
     * @param {string} exchangeAccountId The ID of the exchange account to return
     * @param {string} assetId The ID of the asset to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeAccountAsset(exchangeAccountId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeAsset>>;
    /**
     * Return public key
     * @summary Get public key to encrypt exchange credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeAccountsCredentialsPublicKey(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExchangeAccountsCredentialsPublicKeyResponse>>;
    /**
     * Returns a page include exchange accounts.
     * @summary Pagination list exchange accounts
     * @param {number} limit number of exchanges per page
     * @param {string} [before]
     * @param {string} [after]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPagedExchangeAccounts(limit: number, before?: string, after?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPagedExchangeAccountsResponse>>;
    /**
     * Transfers funds between trading accounts under the same exchange account.
     * @summary Internal transfer for exchange accounts
     * @param {string} exchangeAccountId The ID of the exchange account to return
     * @param {CreateInternalTransferRequest} [createInternalTransferRequest]
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    internalTransfer(exchangeAccountId: string, createInternalTransferRequest?: CreateInternalTransferRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InternalTransferResponse>>;
};
/**
 * ExchangeAccountsApi - factory interface
 * @export
 */
export declare const ExchangeAccountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add an exchange account to exchanges.
     * @summary Add an exchange account
     * @param {ExchangeAccountsApiAddExchangeAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addExchangeAccount(requestParameters: ExchangeAccountsApiAddExchangeAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<AddExchangeAccountResponse>;
    /**
     * Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
     * @summary Convert exchange account funds from the source asset to the destination asset.
     * @param {ExchangeAccountsApiConvertAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    convertAssets(requestParameters: ExchangeAccountsApiConvertAssetsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConvertAssetsResponse>;
    /**
     * Returns an exchange account by ID.
     * @summary Find a specific exchange account
     * @param {ExchangeAccountsApiGetExchangeAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeAccount(requestParameters: ExchangeAccountsApiGetExchangeAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExchangeAccount>;
    /**
     * Returns an asset for an exchange account.
     * @summary Find an asset for an exchange account
     * @param {ExchangeAccountsApiGetExchangeAccountAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeAccountAsset(requestParameters: ExchangeAccountsApiGetExchangeAccountAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExchangeAsset>;
    /**
     * Return public key
     * @summary Get public key to encrypt exchange credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeAccountsCredentialsPublicKey(options?: RawAxiosRequestConfig): AxiosPromise<GetExchangeAccountsCredentialsPublicKeyResponse>;
    /**
     * Returns a page include exchange accounts.
     * @summary Pagination list exchange accounts
     * @param {ExchangeAccountsApiGetPagedExchangeAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPagedExchangeAccounts(requestParameters: ExchangeAccountsApiGetPagedExchangeAccountsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetPagedExchangeAccountsResponse>;
    /**
     * Transfers funds between trading accounts under the same exchange account.
     * @summary Internal transfer for exchange accounts
     * @param {ExchangeAccountsApiInternalTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    internalTransfer(requestParameters: ExchangeAccountsApiInternalTransferRequest, options?: RawAxiosRequestConfig): AxiosPromise<InternalTransferResponse>;
};
/**
 * Request parameters for addExchangeAccount operation in ExchangeAccountsApi.
 * @export
 * @interface ExchangeAccountsApiAddExchangeAccountRequest
 */
export interface ExchangeAccountsApiAddExchangeAccountRequest {
    /**
     *
     * @type {AddExchangeAccountRequest}
     * @memberof ExchangeAccountsApiAddExchangeAccount
     */
    readonly addExchangeAccountRequest: AddExchangeAccountRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ExchangeAccountsApiAddExchangeAccount
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for convertAssets operation in ExchangeAccountsApi.
 * @export
 * @interface ExchangeAccountsApiConvertAssetsRequest
 */
export interface ExchangeAccountsApiConvertAssetsRequest {
    /**
     * The ID of the exchange account. Please make sure the exchange supports conversions. To find the ID of your exchange account, use GET/exchange_accounts.
     * @type {string}
     * @memberof ExchangeAccountsApiConvertAssets
     */
    readonly exchangeAccountId: string;
    /**
     *
     * @type {ConvertAssetsRequest}
     * @memberof ExchangeAccountsApiConvertAssets
     */
    readonly convertAssetsRequest?: ConvertAssetsRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ExchangeAccountsApiConvertAssets
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for getExchangeAccount operation in ExchangeAccountsApi.
 * @export
 * @interface ExchangeAccountsApiGetExchangeAccountRequest
 */
export interface ExchangeAccountsApiGetExchangeAccountRequest {
    /**
     * The ID of the exchange account to return
     * @type {string}
     * @memberof ExchangeAccountsApiGetExchangeAccount
     */
    readonly exchangeAccountId: string;
}
/**
 * Request parameters for getExchangeAccountAsset operation in ExchangeAccountsApi.
 * @export
 * @interface ExchangeAccountsApiGetExchangeAccountAssetRequest
 */
export interface ExchangeAccountsApiGetExchangeAccountAssetRequest {
    /**
     * The ID of the exchange account to return
     * @type {string}
     * @memberof ExchangeAccountsApiGetExchangeAccountAsset
     */
    readonly exchangeAccountId: string;
    /**
     * The ID of the asset to return
     * @type {string}
     * @memberof ExchangeAccountsApiGetExchangeAccountAsset
     */
    readonly assetId: string;
}
/**
 * Request parameters for getPagedExchangeAccounts operation in ExchangeAccountsApi.
 * @export
 * @interface ExchangeAccountsApiGetPagedExchangeAccountsRequest
 */
export interface ExchangeAccountsApiGetPagedExchangeAccountsRequest {
    /**
     * number of exchanges per page
     * @type {number}
     * @memberof ExchangeAccountsApiGetPagedExchangeAccounts
     */
    readonly limit: number;
    /**
     *
     * @type {string}
     * @memberof ExchangeAccountsApiGetPagedExchangeAccounts
     */
    readonly before?: string;
    /**
     *
     * @type {string}
     * @memberof ExchangeAccountsApiGetPagedExchangeAccounts
     */
    readonly after?: string;
}
/**
 * Request parameters for internalTransfer operation in ExchangeAccountsApi.
 * @export
 * @interface ExchangeAccountsApiInternalTransferRequest
 */
export interface ExchangeAccountsApiInternalTransferRequest {
    /**
     * The ID of the exchange account to return
     * @type {string}
     * @memberof ExchangeAccountsApiInternalTransfer
     */
    readonly exchangeAccountId: string;
    /**
     *
     * @type {CreateInternalTransferRequest}
     * @memberof ExchangeAccountsApiInternalTransfer
     */
    readonly createInternalTransferRequest?: CreateInternalTransferRequest;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ExchangeAccountsApiInternalTransfer
     */
    readonly idempotencyKey?: string;
}
/**
 * ExchangeAccountsApi - object-oriented interface
 * @export
 * @class ExchangeAccountsApi
 * @extends {BaseAPI}
 */
export declare class ExchangeAccountsApi extends BaseAPI {
    /**
     * Add an exchange account to exchanges.
     * @summary Add an exchange account
     * @param {ExchangeAccountsApiAddExchangeAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    addExchangeAccount(requestParameters: ExchangeAccountsApiAddExchangeAccountRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<AddExchangeAccountResponse>>;
    /**
     * Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
     * @summary Convert exchange account funds from the source asset to the destination asset.
     * @param {ExchangeAccountsApiConvertAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    convertAssets(requestParameters: ExchangeAccountsApiConvertAssetsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ConvertAssetsResponse>>;
    /**
     * Returns an exchange account by ID.
     * @summary Find a specific exchange account
     * @param {ExchangeAccountsApiGetExchangeAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    getExchangeAccount(requestParameters: ExchangeAccountsApiGetExchangeAccountRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ExchangeAccount>>;
    /**
     * Returns an asset for an exchange account.
     * @summary Find an asset for an exchange account
     * @param {ExchangeAccountsApiGetExchangeAccountAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    getExchangeAccountAsset(requestParameters: ExchangeAccountsApiGetExchangeAccountAssetRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<ExchangeAsset>>;
    /**
     * Return public key
     * @summary Get public key to encrypt exchange credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    getExchangeAccountsCredentialsPublicKey(): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetExchangeAccountsCredentialsPublicKeyResponse>>;
    /**
     * Returns a page include exchange accounts.
     * @summary Pagination list exchange accounts
     * @param {ExchangeAccountsApiGetPagedExchangeAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    getPagedExchangeAccounts(requestParameters: ExchangeAccountsApiGetPagedExchangeAccountsRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<GetPagedExchangeAccountsResponse>>;
    /**
     * Transfers funds between trading accounts under the same exchange account.
     * @summary Internal transfer for exchange accounts
     * @param {ExchangeAccountsApiInternalTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    internalTransfer(requestParameters: ExchangeAccountsApiInternalTransferRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<InternalTransferResponse>>;
}
